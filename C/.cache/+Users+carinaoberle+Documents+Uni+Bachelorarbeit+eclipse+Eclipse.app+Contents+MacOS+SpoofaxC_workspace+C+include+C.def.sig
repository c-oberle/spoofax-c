definition([module(unparameterized("AdditiveExpressions"),[imports([module(unparameterized("MultiplicativeExpressions"))])],[exports(conc-grammars(sorts([sort("AdditiveExpr")]),context-free-syntax([prod([sort("MultiplicativeExpr")],sort("AdditiveExpr"),attrs([])),prod([sort("AdditiveExpr"),lit("+"),sort("MultiplicativeExpr")],sort("AdditiveExpr"),attrs([term(cons("Plus"))])),prod([sort("AdditiveExpr"),lit("-"),sort("MultiplicativeExpr")],sort("AdditiveExpr"),attrs([term(cons("Minus"))]))])))]),module(unparameterized("AndExpressions"),[imports([module(unparameterized("EqualityExpressions"))])],[exports(conc-grammars(conc-grammars(sorts([sort("AndExpr")]),context-free-syntax([prod([sort("EqualityExpr")],sort("AndExpr"),attrs([])),prod([sort("AndExpr"),lit("&"),sort("EqualityExpr")],sort("AndExpr"),attrs([term(cons("And"))]))])),context-free-restrictions([follow([lit("&")],single(char-class(simple-charclass(present(short("\\&"))))))])))]),module(unparameterized("AssignmentExpressions"),[imports([module(unparameterized("CondExpressions"))])],[exports(sorts([sort("AssignmentOperator")])),exports(conc-grammars(sorts([sort("AssignmentExpr")]),context-free-syntax([prod([sort("CondExpr")],sort("AssignmentExpr"),attrs([])),prod([sort("UnaryExpr"),sort("AssignmentOperator"),sort("AssignmentExpr")],sort("AssignmentExpr"),attrs([term(cons("Assign"))])),prod([lit("=")],sort("AssignmentOperator"),attrs([term(cons("AssignOp"))])),prod([lit("*=")],sort("AssignmentOperator"),attrs([term(cons("AssignOpMul"))])),prod([lit("/=")],sort("AssignmentOperator"),attrs([term(cons("AssignOpDiv"))])),prod([lit("%=")],sort("AssignmentOperator"),attrs([term(cons("AssignOpMod"))])),prod([lit("+=")],sort("AssignmentOperator"),attrs([term(cons("AssignOpPlus"))])),prod([lit("-=")],sort("AssignmentOperator"),attrs([term(cons("AssignOpMinus"))])),prod([lit(">>=")],sort("AssignmentOperator"),attrs([term(cons("AssignOpShiftR"))])),prod([lit("<<=")],sort("AssignmentOperator"),attrs([term(cons("AssignOpShiftL"))])),prod([lit("&=")],sort("AssignmentOperator"),attrs([term(cons("AssignOpAnd"))])),prod([lit("^=")],sort("AssignmentOperator"),attrs([term(cons("AssignOpXor"))])),prod([lit("|=")],sort("AssignmentOperator"),attrs([term(cons("AssignOpOr"))]))])))]),module(unparameterized("MainC"),[imports([module(unparameterized("TranslationUnits"))])],[exports(context-free-start-symbols([sort("TranslationUnit"),sort("ExternalDeclarationSeq")]))]),module(unparameterized("CastExpressions"),[imports([module(unparameterized("UnaryExpressions"))])],[exports(conc-grammars(sorts([sort("CastExpr")]),context-free-syntax([prod([sort("UnaryExpr")],sort("CastExpr"),attrs([])),prod([lit("("),sort("TypeName"),lit(")"),sort("CastExpr")],sort("CastExpr"),attrs([term(cons("Cast"))]))])))]),module(unparameterized("CharLiterals"),[imports([module(unparameterized("Characters")),module(unparameterized("EscapeSequences"))])],[exports(sorts([sort("CHARACTER-LITERAL"),sort("C-CHAR-SEQUENCE"),sort("C-CHAR")])),exports(conc-grammars(conc-grammars(sorts([sort("CharLiteral")]),lexical-syntax([prod([lit("'"),sort("C-CHAR-SEQUENCE"),lit("'")],sort("CHARACTER-LITERAL"),attrs([])),prod([lit("L'"),sort("C-CHAR-SEQUENCE"),lit("'")],sort("CHARACTER-LITERAL"),attrs([])),prod([iter(sort("C-CHAR"))],sort("C-CHAR-SEQUENCE"),attrs([])),prod([sort("C-SOURCE-CHARACTER")],sort("C-CHAR"),attrs([])),prod([sort("ESCAPE-SEQUENCE")],sort("C-CHAR"),attrs([])),prod([sort("UNIVERSAL-CHARACTER-NAME")],sort("C-CHAR"),attrs([]))])),context-free-syntax([prod([sort("CHARACTER-LITERAL")],sort("CharLiteral"),attrs([]))])))]),module(unparameterized("Characters"),[imports([module(unparameterized("Layout"))])],[exports(conc-grammars(sorts([sort("DIGIT"),sort("NON-DIGIT"),sort("NONZERO-DIGIT"),sort("SOURCE-CHARACTER"),sort("S-SOURCE-CHARACTER"),sort("C-SOURCE-CHARACTER"),sort("OCTAL-DIGIT"),sort("LOW-OCTAL-DIGIT"),sort("HIGH-OCTAL-DIGIT"),sort("HEXADECIMAL-DIGIT")]),lexical-syntax([prod([char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),conc(short("\\_"),conc(short("\\{"),conc(short("\\}"),conc(short("\\["),conc(short("\\]"),conc(short("\\#"),conc(short("\\("),conc(short("\\)"),conc(short("\\<"),conc(short("\\>"),conc(short("\\%"),conc(short("\\:"),conc(short("\\;"),conc(short("\\."),conc(short("\\?"),conc(short("\\*"),conc(short("\\+"),conc(short("\\-"),conc(short("\\/"),conc(short("\\^"),conc(short("\\&"),conc(short("\\|"),conc(short("\\~"),conc(short("\\!"),conc(short("\\="),conc(short("\\,"),conc(short("\\\""),conc(short("\\'"),conc(short("\\ "),conc(short("\\n"),conc(short("\\t"),short("\\\\"))))))))))))))))))))))))))))))))))))))],sort("SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\0"),numeric("\\9")))))],sort("S-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\11"),numeric("\\12")))))],sort("S-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\14"),numeric("\\33")))))],sort("S-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\35"),numeric("\\91")))))],sort("S-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\93"),numeric("\\127")))))],sort("S-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\192"),numeric("\\223"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191")))))],sort("S-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\224"),numeric("\\239"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191")))))],sort("S-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\240"),numeric("\\255"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191")))))],sort("S-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\0"),numeric("\\9")))))],sort("C-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\11"),numeric("\\12")))))],sort("C-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\14"),numeric("\\38")))))],sort("C-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\40"),numeric("\\91")))))],sort("C-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\93"),numeric("\\127")))))],sort("C-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\192"),numeric("\\223"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191")))))],sort("C-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\224"),numeric("\\239"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191")))))],sort("C-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(numeric("\\240"),numeric("\\255"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191"))))),char-class(simple-charclass(present(range(numeric("\\128"),numeric("\\191")))))],sort("C-SOURCE-CHARACTER"),attrs([])),prod([char-class(simple-charclass(present(range(short("0"),short("9")))))],sort("DIGIT"),attrs([])),prod([char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),short("\\_"))))))],sort("NON-DIGIT"),attrs([])),prod([char-class(simple-charclass(present(range(short("1"),short("9")))))],sort("NONZERO-DIGIT"),attrs([])),prod([char-class(simple-charclass(present(range(short("0"),short("7")))))],sort("OCTAL-DIGIT"),attrs([])),prod([char-class(simple-charclass(present(range(short("0"),short("3")))))],sort("LOW-OCTAL-DIGIT"),attrs([])),prod([char-class(simple-charclass(present(range(short("4"),short("7")))))],sort("HIGH-OCTAL-DIGIT"),attrs([])),prod([char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F")))))))],sort("HEXADECIMAL-DIGIT"),attrs([]))])))]),module(unparameterized("CompoundStatements"),[imports([module(unparameterized("Statements"))])],[exports(sorts([sort("BlockItemList"),sort("BlockItem")])),exports(conc-grammars(sorts([sort("CompoundStm")]),context-free-syntax([prod([lit("{"),label(unquoted("bli"),opt(sort("BlockItemList"))),lit("}")],sort("CompoundStm"),attrs([term(cons("Block"))])),prod([iter(sort("BlockItem"))],sort("BlockItemList"),attrs([term(cons("BlockItems"))])),prod([sort("Stm")],sort("BlockItem"),attrs([])),prod([sort("Declaration")],sort("BlockItem"),attrs([]))])))]),module(unparameterized("CondExpressions"),[imports([module(unparameterized("AssignmentExpressions")),module(unparameterized("Expressions")),module(unparameterized("LogicalOrExpressions"))])],[exports(conc-grammars(sorts([sort("CondExpr")]),context-free-syntax([prod([sort("LogicalOrExpr")],sort("CondExpr"),attrs([])),prod([sort("LogicalOrExpr"),lit("?"),sort("Expr"),lit(":"),sort("CondExpr")],sort("CondExpr"),attrs([term(cons("Cond"))]))])))]),module(unparameterized("ConstantExpressions"),[imports([module(unparameterized("CondExpressions"))])],[exports(conc-grammars(sorts([sort("ConstantExpr")]),context-free-syntax([prod([sort("CondExpr")],sort("ConstantExpr"),attrs([term(cons("ConstExpr"))]))])))]),module(unparameterized("Declarations"),[imports([module(unparameterized("InitDeclarators")),module(unparameterized("FunctionDefinitions")),module(unparameterized("Specifiers"))])],[exports(conc-grammars(sorts([sort("Declaration")]),context-free-syntax([prod([sort("DeclarationSpecifierSeq"),label(unquoted("initd"),opt(sort("InitDeclaratorList"))),lit(";")],sort("Declaration"),attrs([term(cons("Dec"))]))])))]),module(unparameterized("Declarators"),[imports([module(unparameterized("ConstantExpressions")),module(unparameterized("TypeQualifiers")),module(unparameterized("ParameterDeclarations"))])],[exports(sorts([sort("DirectDeclarator"),sort("Pointer")])),exports(conc-grammars(sorts([sort("Declarator"),sort("PointerSeq"),sort("IdentifierList")]),context-free-syntax([prod([label(unquoted("p"),opt(sort("PointerSeq"))),sort("DirectDeclarator")],sort("Declarator"),attrs([term(cons("Declarator"))])),prod([sort("Identifier")],sort("DirectDeclarator"),attrs([])),prod([lit("("),sort("Declarator"),lit(")")],sort("DirectDeclarator"),attrs([term(cons("DeclPar"))])),prod([sort("DirectDeclarator"),lit("["),label(unquoted("tql"),opt(sort("TypeQualifierList"))),label(unquoted("as"),opt(sort("AssignmentExpr"))),lit("]")],sort("DirectDeclarator"),attrs([term(cons("DeclQualifierAssign"))])),prod([sort("DirectDeclarator"),lit("["),lit("static"),label(unquoted("tql"),opt(sort("TypeQualifierList"))),sort("AssignmentExpr"),lit("]")],sort("DirectDeclarator"),attrs([term(cons("DeclStaticAssign"))])),prod([sort("DirectDeclarator"),lit("["),sort("TypeQualifierList"),lit("static"),sort("AssignmentExpr"),lit("]")],sort("DirectDeclarator"),attrs([term(cons("DeclQualifierStaticAssign"))])),prod([sort("DirectDeclarator"),lit("["),label(unquoted("tql"),opt(sort("TypeQualifierList"))),lit("*"),lit("]")],sort("DirectDeclarator"),attrs([term(cons("DeclTypeQualifiers"))])),prod([sort("DirectDeclarator"),lit("("),sort("ParameterTypeList"),lit(")")],sort("DirectDeclarator"),attrs([term(cons("DeclParams"))])),prod([sort("DirectDeclarator"),lit("("),label(unquoted("il"),opt(sort("IdentifierList"))),lit(")")],sort("DirectDeclarator"),attrs([term(cons("DeclIds"))])),prod([iter(sort("Pointer"))],sort("PointerSeq"),attrs([term(cons("PointerSeq"))])),prod([lit("*"),label(unquoted("tql"),opt(sort("TypeQualifierList")))],sort("Pointer"),attrs([term(cons("Pointer"))])),prod([iter-sep(sort("Identifier"),lit(","))],sort("IdentifierList"),attrs([term(cons("IdentifierList"))]))])))]),module(unparameterized("Designations"),[imports([module(unparameterized("ConstantExpressions")),module(unparameterized("Identifiers"))])],[exports(sorts([sort("DesignatorList"),sort("Designator")])),exports(conc-grammars(sorts([sort("Designation")]),context-free-syntax([prod([sort("DesignatorList"),lit("=")],sort("Designation"),attrs([term(cons("Designation"))])),prod([iter(sort("Designator"))],sort("DesignatorList"),attrs([term(cons("DesignatorList"))])),prod([lit("["),sort("ConstantExpr"),lit("]")],sort("Designator"),attrs([term(cons("BracketDesignator"))])),prod([lit("."),sort("Identifier")],sort("Designator"),attrs([term(cons("DotDesignator"))]))])))]),module(unparameterized("EnumSpecifiers"),[imports([module(unparameterized("Identifiers")),module(unparameterized("ConstantExpressions"))])],[exports(sorts([sort("EnumeratorList"),sort("EnumeratorDefinition")])),exports(conc-grammars(sorts([sort("EnumSpecifier"),sort("EnumerationConstant")]),context-free-syntax([prod([lit("enum"),label(unquoted("ident"),opt(sort("Identifier"))),lit("{"),sort("EnumeratorList"),lit("}")],sort("EnumSpecifier"),attrs([term(cons("EnumSpecifier"))])),prod([lit("enum"),label(unquoted("ident"),opt(sort("Identifier"))),lit("{"),sort("EnumeratorList"),lit(","),lit("}")],sort("EnumSpecifier"),attrs([term(cons("EnumSpecifierTrComma"))])),prod([lit("enum"),sort("Identifier")],sort("EnumSpecifier"),attrs([term(cons("EnumIdentifier"))])),prod([label(unquoted("enud"),iter-sep(sort("EnumeratorDefinition"),lit(",")))],sort("EnumeratorList"),attrs([term(cons("EnumeratorList"))])),prod([sort("EnumerationConstant")],sort("EnumeratorDefinition"),attrs([term(cons("EnumeratorConst"))])),prod([sort("EnumerationConstant"),lit("="),sort("ConstantExpr")],sort("EnumeratorDefinition"),attrs([term(cons("EnumeratorDef"))])),prod([sort("Identifier")],sort("EnumerationConstant"),attrs([]))])))]),module(unparameterized("EqualityExpressions"),[imports([module(unparameterized("RelationalExpressions"))])],[exports(conc-grammars(sorts([sort("EqualityExpr")]),context-free-syntax([prod([sort("RelationalExpr")],sort("EqualityExpr"),attrs([])),prod([sort("EqualityExpr"),lit("=="),sort("RelationalExpr")],sort("EqualityExpr"),attrs([term(cons("Eq"))])),prod([sort("EqualityExpr"),lit("!="),sort("RelationalExpr")],sort("EqualityExpr"),attrs([term(cons("NotEq"))]))])))]),module(unparameterized("EscapeSequences"),[imports([module(unparameterized("Characters"))])],[exports(sorts([sort("SIMPLE-ESCAPE-SEQUENCE"),sort("OCTAL-ESCAPE-SEQUENCE"),sort("OCTAL-ESCAPE-SEQUENCE1"),sort("OCTAL-ESCAPE-SEQUENCE2"),sort("OCTAL-ESCAPE-SEQUENCE3"),sort("OCTAL-ESCAPE-SEQUENCE4"),sort("HEXADECIMAL-ESCAPE-SEQUENCE"),sort("HEX-QUAD")])),exports(conc-grammars(conc-grammars(conc-grammars(conc-grammars(conc-grammars(sorts([sort("ESCAPE-SEQUENCE"),sort("UNIVERSAL-CHARACTER-NAME")]),lexical-syntax([prod([sort("SIMPLE-ESCAPE-SEQUENCE")],sort("ESCAPE-SEQUENCE"),attrs([])),prod([sort("OCTAL-ESCAPE-SEQUENCE")],sort("ESCAPE-SEQUENCE"),attrs([])),prod([sort("HEXADECIMAL-ESCAPE-SEQUENCE")],sort("ESCAPE-SEQUENCE"),attrs([])),prod([sort("UNIVERSAL-CHARACTER-NAME")],sort("ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\'")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\\\\"")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\?")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\\\\\")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\a")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\b")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\f")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\n")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\r")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\t")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\v")],sort("SIMPLE-ESCAPE-SEQUENCE"),attrs([])),prod([lit("\\\\"),sort("OCTAL-DIGIT")],sort("OCTAL-ESCAPE-SEQUENCE1"),attrs([])),prod([lit("\\\\"),sort("LOW-OCTAL-DIGIT"),sort("OCTAL-DIGIT")],sort("OCTAL-ESCAPE-SEQUENCE2"),attrs([])),prod([lit("\\\\"),sort("HIGH-OCTAL-DIGIT"),sort("OCTAL-DIGIT")],sort("OCTAL-ESCAPE-SEQUENCE3"),attrs([])),prod([lit("\\\\"),sort("LOW-OCTAL-DIGIT"),sort("OCTAL-DIGIT"),sort("OCTAL-DIGIT")],sort("OCTAL-ESCAPE-SEQUENCE4"),attrs([])),prod([sort("OCTAL-ESCAPE-SEQUENCE1")],sort("OCTAL-ESCAPE-SEQUENCE"),attrs([])),prod([sort("OCTAL-ESCAPE-SEQUENCE2")],sort("OCTAL-ESCAPE-SEQUENCE"),attrs([])),prod([sort("OCTAL-ESCAPE-SEQUENCE3")],sort("OCTAL-ESCAPE-SEQUENCE"),attrs([])),prod([sort("OCTAL-ESCAPE-SEQUENCE4")],sort("OCTAL-ESCAPE-SEQUENCE"),attrs([]))])),lexical-restrictions([follow([sort("OCTAL-ESCAPE-SEQUENCE1")],single(char-class(simple-charclass(present(range(short("0"),short("7"))))))),follow([sort("OCTAL-ESCAPE-SEQUENCE2")],single(char-class(simple-charclass(present(range(short("0"),short("7")))))))])),lexical-syntax([prod([lit("\\\\x"),iter(sort("HEXADECIMAL-DIGIT"))],sort("HEXADECIMAL-ESCAPE-SEQUENCE"),attrs([]))])),lexical-restrictions([follow([sort("HEXADECIMAL-ESCAPE-SEQUENCE")],single(char-class(simple-charclass(present(conc(range(short("0"),short("9")),conc(range(short("a"),short("f")),range(short("A"),short("F")))))))))])),lexical-syntax([prod([sort("HEXADECIMAL-DIGIT"),sort("HEXADECIMAL-DIGIT"),sort("HEXADECIMAL-DIGIT"),sort("HEXADECIMAL-DIGIT")],sort("HEX-QUAD"),attrs([])),prod([lit("\\\\u"),sort("HEX-QUAD")],sort("UNIVERSAL-CHARACTER-NAME"),attrs([])),prod([lit("\\\\U"),sort("HEX-QUAD"),sort("HEX-QUAD")],sort("UNIVERSAL-CHARACTER-NAME"),attrs([]))])))]),module(unparameterized("ExclusiveOrExpressions"),[imports([module(unparameterized("AndExpressions"))])],[exports(conc-grammars(sorts([sort("ExclusiveOrExpr")]),context-free-syntax([prod([sort("AndExpr")],sort("ExclusiveOrExpr"),attrs([])),prod([sort("ExclusiveOrExpr"),lit("^"),sort("AndExpr")],sort("ExclusiveOrExpr"),attrs([term(cons("ExcOr"))]))])))]),module(unparameterized("Expressions"),[imports([module(unparameterized("AssignmentExpressions"))])],[exports(conc-grammars(sorts([sort("Expr")]),context-free-syntax([prod([label(unquoted("ass"),iter-sep(sort("AssignmentExpr"),lit(",")))],sort("Expr"),attrs([term(cons("Expr"))]))])))]),module(unparameterized("ExpressionStatements"),[imports([module(unparameterized("Expressions"))])],[exports(conc-grammars(sorts([sort("ExprStm")]),context-free-syntax([prod([label(unquoted("expr"),opt(sort("Expr"))),lit(";")],sort("ExprStm"),attrs([term(cons("ExprStm"))]))])))]),module(unparameterized("FloatLiterals"),[imports([module(unparameterized("Characters"))])],[exports(sorts([sort("FRACTIONAL-CONSTANT"),sort("EXPONENT-PART"),sort("SIGN"),sort("FLOATING-SUFFIX"),sort("DECIMAL-FLOATING-CONSTANT"),sort("HEXADECIMAL-FLOATING-CONSTANT"),sort("HEXADECIMAL-FRACTIONAL-CONSTANT"),sort("BINARY-EXPONENT-PART")])),exports(conc-grammars(conc-grammars(sorts([sort("FloatLiteral")]),lexical-syntax([prod([sort("FRACTIONAL-CONSTANT"),opt(sort("EXPONENT-PART")),opt(sort("FLOATING-SUFFIX"))],sort("DECIMAL-FLOATING-CONSTANT"),attrs([])),prod([iter(sort("DIGIT")),sort("EXPONENT-PART"),opt(sort("FLOATING-SUFFIX"))],sort("DECIMAL-FLOATING-CONSTANT"),attrs([])),prod([lit("0x"),sort("HEXADECIMAL-FRACTIONAL-CONSTANT"),sort("BINARY-EXPONENT-PART"),opt(sort("FLOATING-SUFFIX"))],sort("HEXADECIMAL-FLOATING-CONSTANT"),attrs([])),prod([lit("0x"),iter(sort("HEXADECIMAL-DIGIT")),sort("BINARY-EXPONENT-PART"),opt(sort("FLOATING-SUFFIX"))],sort("HEXADECIMAL-FLOATING-CONSTANT"),attrs([])),prod([lit("0X"),sort("HEXADECIMAL-FRACTIONAL-CONSTANT"),sort("BINARY-EXPONENT-PART"),opt(sort("FLOATING-SUFFIX"))],sort("HEXADECIMAL-FLOATING-CONSTANT"),attrs([])),prod([lit("0X"),iter(sort("HEXADECIMAL-DIGIT")),sort("BINARY-EXPONENT-PART"),opt(sort("FLOATING-SUFFIX"))],sort("HEXADECIMAL-FLOATING-CONSTANT"),attrs([])),prod([iter-star(sort("DIGIT")),lit("."),iter(sort("DIGIT"))],sort("FRACTIONAL-CONSTANT"),attrs([])),prod([iter(sort("DIGIT")),lit(".")],sort("FRACTIONAL-CONSTANT"),attrs([])),prod([char-class(simple-charclass(present(conc(short("e"),short("E"))))),opt(sort("SIGN")),iter(sort("DIGIT"))],sort("EXPONENT-PART"),attrs([])),prod([char-class(simple-charclass(present(conc(short("\\+"),short("\\-")))))],sort("SIGN"),attrs([])),prod([iter-star(sort("HEXADECIMAL-DIGIT")),lit("."),iter(sort("HEXADECIMAL-DIGIT"))],sort("HEXADECIMAL-FRACTIONAL-CONSTANT"),attrs([])),prod([iter(sort("HEXADECIMAL-DIGIT")),lit(".")],sort("HEXADECIMAL-FRACTIONAL-CONSTANT"),attrs([])),prod([lit("p"),opt(sort("SIGN")),iter(sort("DIGIT"))],sort("BINARY-EXPONENT-PART"),attrs([])),prod([lit("P"),opt(sort("SIGN")),iter(sort("DIGIT"))],sort("BINARY-EXPONENT-PART"),attrs([])),prod([char-class(simple-charclass(present(conc(short("f"),conc(short("l"),conc(short("F"),short("L")))))))],sort("FLOATING-SUFFIX"),attrs([]))])),context-free-syntax([prod([sort("DECIMAL-FLOATING-CONSTANT")],sort("FloatLiteral"),attrs([])),prod([sort("HEXADECIMAL-FLOATING-CONSTANT")],sort("FloatLiteral"),attrs([]))])))]),module(unparameterized("FunctionDefinitions"),[imports([module(unparameterized("CompoundStatements")),module(unparameterized("Declarators")),module(unparameterized("Specifiers"))])],[exports(sorts([sort("DeclarationList")])),exports(conc-grammars(sorts([sort("FunctionDefinition")]),context-free-syntax([prod([sort("DeclarationSpecifierSeq"),sort("Declarator"),label(unquoted("dl"),opt(sort("DeclarationList"))),sort("CompoundStm")],sort("FunctionDefinition"),attrs([term(cons("FunDef"))])),prod([iter(sort("Declaration"))],sort("DeclarationList"),attrs([term(cons("DecSeq"))]))])))]),module(unparameterized("FunctionSpecifiers"),[],[exports(conc-grammars(sorts([sort("FunctionSpecifier")]),context-free-syntax([prod([lit("inline")],sort("FunctionSpecifier"),attrs([term(cons("Inline"))]))])))]),module(unparameterized("Identifiers"),[imports([module(unparameterized("Characters")),module(unparameterized("Keywords")),module(unparameterized("Layout"))])],[exports(sorts([sort("ID")])),exports(conc-grammars(conc-grammars(conc-grammars(sorts([sort("Identifier")]),lexical-syntax([prod([sort("NON-DIGIT"),iter-star(alt(sort("NON-DIGIT"),sort("DIGIT")))],sort("ID"),attrs([]))])),lexical-restrictions([follow([sort("ID")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_")))))))))])),context-free-syntax([prod([sort("ID")],sort("Identifier"),attrs([term(cons("Id"))]))])))]),module(unparameterized("OrExpressions"),[imports([module(unparameterized("ExclusiveOrExpressions"))])],[exports(conc-grammars(sorts([sort("OrExpr")]),context-free-syntax([prod([sort("ExclusiveOrExpr")],sort("OrExpr"),attrs([])),prod([sort("OrExpr"),lit("|"),sort("ExclusiveOrExpr")],sort("OrExpr"),attrs([term(cons("Or"))]))])))]),module(unparameterized("InitDeclarators"),[imports([module(unparameterized("Declarators"))])],[exports(conc-grammars(sorts([sort("InitDeclarator"),sort("InitDeclaratorList")]),context-free-syntax([prod([label(unquoted("initd"),iter-sep(sort("InitDeclarator"),lit(",")))],sort("InitDeclaratorList"),attrs([term(cons("InitDeclaratorList"))])),prod([sort("Declarator")],sort("InitDeclarator"),attrs([])),prod([sort("Declarator"),lit("="),sort("Initializer")],sort("InitDeclarator"),attrs([term(cons("InitDeclarator"))]))])))]),module(unparameterized("Initializers"),[imports([module(unparameterized("AssignmentExpressions")),module(unparameterized("Designations"))])],[exports(sorts([sort("InitializerSeq")])),exports(conc-grammars(sorts([sort("Initializer"),sort("InitializerList")]),context-free-syntax([prod([sort("AssignmentExpr")],sort("Initializer"),attrs([])),prod([lit("{"),sort("InitializerList"),lit("}")],sort("Initializer"),attrs([term(cons("Initializer"))])),prod([lit("{"),sort("InitializerList"),lit(","),lit("}")],sort("Initializer"),attrs([term(cons("InitializerTrComma"))])),prod([opt(sort("Designation")),sort("Initializer")],sort("InitializerSeq"),attrs([term(cons("InitializerSeq"))])),prod([iter-sep(sort("InitializerSeq"),lit(","))],sort("InitializerList"),attrs([term(cons("InitializerList"))]))])))]),module(unparameterized("IntLiterals"),[imports([module(unparameterized("Characters"))])],[exports(sorts([sort("INTEGER-LITERAL"),sort("DECIMAL-LITERAL"),sort("OCTAL-LITERAL"),sort("HEXADECIMAL-LITERAL"),sort("INTEGER-SUFFIX"),sort("UNSIGNED-SUFFIX"),sort("LONG-SUFFIX"),sort("LONG-LONG-SUFFIX")])),exports(conc-grammars(conc-grammars(conc-grammars(sorts([sort("IntLiteral")]),lexical-syntax([prod([sort("DECIMAL-LITERAL"),opt(sort("INTEGER-SUFFIX"))],sort("INTEGER-LITERAL"),attrs([])),prod([sort("OCTAL-LITERAL"),opt(sort("INTEGER-SUFFIX"))],sort("INTEGER-LITERAL"),attrs([])),prod([sort("HEXADECIMAL-LITERAL"),opt(sort("INTEGER-SUFFIX"))],sort("INTEGER-LITERAL"),attrs([])),prod([sort("NONZERO-DIGIT"),iter-star(sort("DIGIT"))],sort("DECIMAL-LITERAL"),attrs([])),prod([lit("0"),iter-star(sort("OCTAL-DIGIT"))],sort("OCTAL-LITERAL"),attrs([])),prod([lit("0x"),iter-star(sort("HEXADECIMAL-DIGIT"))],sort("HEXADECIMAL-LITERAL"),attrs([])),prod([lit("0X"),iter-star(sort("HEXADECIMAL-DIGIT"))],sort("HEXADECIMAL-LITERAL"),attrs([])),prod([sort("UNSIGNED-SUFFIX"),opt(sort("LONG-SUFFIX"))],sort("INTEGER-SUFFIX"),attrs([prefer])),prod([sort("UNSIGNED-SUFFIX"),opt(sort("LONG-LONG-SUFFIX"))],sort("INTEGER-SUFFIX"),attrs([])),prod([sort("LONG-SUFFIX"),opt(sort("UNSIGNED-SUFFIX"))],sort("INTEGER-SUFFIX"),attrs([])),prod([sort("LONG-LONG-SUFFIX"),opt(sort("UNSIGNED-SUFFIX"))],sort("INTEGER-SUFFIX"),attrs([])),prod([char-class(simple-charclass(present(conc(short("u"),short("U")))))],sort("UNSIGNED-SUFFIX"),attrs([])),prod([char-class(simple-charclass(present(conc(short("l"),short("L")))))],sort("LONG-SUFFIX"),attrs([])),prod([char-class(simple-charclass(present(short("l")))),char-class(simple-charclass(present(short("l"))))],sort("LONG-LONG-SUFFIX"),attrs([])),prod([char-class(simple-charclass(present(short("L")))),char-class(simple-charclass(present(short("L"))))],sort("LONG-LONG-SUFFIX"),attrs([]))])),context-free-syntax([prod([sort("INTEGER-LITERAL")],sort("IntLiteral"),attrs([]))])),lexical-restrictions([follow([sort("INTEGER-LITERAL")],single(char-class(simple-charclass(present(short("\\."))))))])))]),module(unparameterized("IterationStatements"),[imports([module(unparameterized("Statements")),module(unparameterized("SelectionStatements")),module(unparameterized("ExpressionStatements")),module(unparameterized("Declarations"))])],[exports(conc-grammars(sorts([sort("IterationStm")]),context-free-syntax([prod([lit("while"),lit("("),sort("Expr"),lit(")"),sort("Stm")],sort("IterationStm"),attrs([term(cons("While"))])),prod([lit("do"),sort("Stm"),lit("while"),lit("("),sort("Expr"),lit(")"),lit(";")],sort("IterationStm"),attrs([term(cons("Do"))])),prod([lit("for"),lit("("),label(unquoted("exp1"),opt(sort("Expr"))),lit(";"),label(unquoted("exp2"),opt(sort("Expr"))),lit(";"),label(unquoted("exp3"),opt(sort("Expr"))),lit(")"),sort("Stm")],sort("IterationStm"),attrs([term(cons("For"))])),prod([lit("for"),lit("("),sort("Declaration"),label(unquoted("exp1"),opt(sort("Expr"))),lit(";"),label(unquoted("exp2"),opt(sort("Expr"))),lit(")"),sort("Stm")],sort("IterationStm"),attrs([term(cons("ForDec"))]))])))]),module(unparameterized("JumpStatements"),[imports([module(unparameterized("Expressions")),module(unparameterized("Identifiers"))])],[exports(conc-grammars(sorts([sort("JumpStm")]),context-free-syntax([prod([lit("break"),lit(";")],sort("JumpStm"),attrs([term(cons("Break"))])),prod([lit("continue"),lit(";")],sort("JumpStm"),attrs([term(cons("Continue"))])),prod([lit("return"),label(unquoted("exp1"),opt(sort("Expr"))),lit(";")],sort("JumpStm"),attrs([term(cons("Return"))])),prod([lit("goto"),sort("Identifier"),lit(";")],sort("JumpStm"),attrs([term(cons("Goto"))]))])))]),module(unparameterized("Keywords"),[imports([module(unparameterized("Layout")),module(unparameterized("Identifiers"))])],[exports(conc-grammars(context-free-syntax([prod([lit("auto")],sort("Identifier"),attrs([reject])),prod([lit("break")],sort("Identifier"),attrs([reject])),prod([lit("case")],sort("Identifier"),attrs([reject])),prod([lit("char")],sort("Identifier"),attrs([reject])),prod([lit("const")],sort("Identifier"),attrs([reject])),prod([lit("continue")],sort("Identifier"),attrs([reject])),prod([lit("default")],sort("Identifier"),attrs([reject])),prod([lit("do")],sort("Identifier"),attrs([reject])),prod([lit("double")],sort("Identifier"),attrs([reject])),prod([lit("else")],sort("Identifier"),attrs([reject])),prod([lit("enum")],sort("Identifier"),attrs([reject])),prod([lit("extern")],sort("Identifier"),attrs([reject])),prod([lit("float")],sort("Identifier"),attrs([reject])),prod([lit("for")],sort("Identifier"),attrs([reject])),prod([lit("goto")],sort("Identifier"),attrs([reject])),prod([lit("if")],sort("Identifier"),attrs([reject])),prod([lit("inline")],sort("Identifier"),attrs([reject])),prod([lit("int")],sort("Identifier"),attrs([reject])),prod([lit("long")],sort("Identifier"),attrs([reject])),prod([lit("register")],sort("Identifier"),attrs([reject])),prod([lit("restrict")],sort("Identifier"),attrs([reject])),prod([lit("return")],sort("Identifier"),attrs([reject])),prod([lit("short")],sort("Identifier"),attrs([reject])),prod([lit("signed")],sort("Identifier"),attrs([reject])),prod([lit("sizeof")],sort("Identifier"),attrs([reject])),prod([lit("static")],sort("Identifier"),attrs([reject])),prod([lit("struct")],sort("Identifier"),attrs([reject])),prod([lit("switch")],sort("Identifier"),attrs([reject])),prod([lit("typedef")],sort("Identifier"),attrs([reject])),prod([lit("union")],sort("Identifier"),attrs([reject])),prod([lit("unsigned")],sort("Identifier"),attrs([reject])),prod([lit("void")],sort("Identifier"),attrs([reject])),prod([lit("volatile")],sort("Identifier"),attrs([reject])),prod([lit("while")],sort("Identifier"),attrs([reject])),prod([lit("_Bool")],sort("Identifier"),attrs([reject])),prod([lit("_Complex")],sort("Identifier"),attrs([reject])),prod([lit("_Imaginary")],sort("Identifier"),attrs([reject]))]),lexical-restrictions([follow([lit("auto")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("break")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("case")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("char")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("const")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("continue")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("default")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("do")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("double")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("else")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("enum")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("extern")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("float")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("for")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("goto")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("if")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("inline")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("int")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("long")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("register")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("restrict")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("return")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("short")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("signed")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("sizeof")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("static")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("struct")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("switch")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("typedef")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("union")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("unsigned")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("void")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("volatile")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("while")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("_Bool")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("_Complex")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_"))))))))),follow([lit("_Imaginary")],single(char-class(simple-charclass(present(conc(range(short("a"),short("z")),conc(range(short("A"),short("Z")),conc(range(short("0"),short("9")),short("\\_")))))))))])))]),module(unparameterized("LabeledStatements"),[imports([module(unparameterized("Identifiers")),module(unparameterized("Statements")),module(unparameterized("ConstantExpressions"))])],[exports(conc-grammars(sorts([sort("LabeledStm")]),context-free-syntax([prod([sort("Identifier"),lit(":"),sort("Stm")],sort("LabeledStm"),attrs([term(cons("Label"))])),prod([lit("case"),sort("ConstantExpr"),lit(":"),sort("Stm")],sort("LabeledStm"),attrs([term(cons("Case"))])),prod([lit("default"),lit(":"),sort("Stm")],sort("LabeledStm"),attrs([term(cons("Default"))]))])))]),module(unparameterized("Layout"),[],[exports(sorts([sort("ASTERISK")])),exports(conc-grammars(conc-grammars(lexical-syntax([prod([char-class(simple-charclass(present(short("\\*"))))],sort("ASTERISK"),attrs([])),prod([char-class(simple-charclass(present(conc(short("\\ "),conc(short("\\t"),conc(short("\\r"),conc(short("\\n"),conc(numeric("\\11"),numeric("\\12")))))))))],layout,attrs([])),prod([lit("//"),iter-star(char-class(comp(simple-charclass(present(conc(short("\\n"),short("\\r"))))))),char-class(simple-charclass(present(conc(short("\\n"),short("\\r")))))],layout,attrs([])),prod([lit("/*"),iter-star(alt(char-class(comp(simple-charclass(present(short("\\*"))))),sort("ASTERISK"))),lit("*/")],layout,attrs([]))]),lexical-restrictions([follow([sort("ASTERISK")],single(char-class(simple-charclass(present(short("\\/"))))))])),context-free-restrictions([follow([opt(layout)],alt(single(char-class(simple-charclass(present(conc(short("\\ "),conc(short("\\t"),conc(short("\\r"),conc(short("\\n"),conc(numeric("\\11"),numeric("\\12")))))))))),single(seq(simple-charclass(present(short("\\/"))),single(char-class(simple-charclass(present(conc(short("\\/"),short("\\*"))))))))))])))]),module(unparameterized("Literals"),[imports([module(unparameterized("CharLiterals")),module(unparameterized("EnumSpecifiers")),module(unparameterized("FloatLiterals")),module(unparameterized("IntLiterals")),module(unparameterized("Layout")),module(unparameterized("StringLiterals"))])],[exports(conc-grammars(sorts([sort("Literal")]),context-free-syntax([prod([sort("IntLiteral")],sort("Literal"),attrs([term(cons("IntLit"))])),prod([sort("CharLiteral")],sort("Literal"),attrs([term(cons("CharLit"))])),prod([sort("FloatLiteral")],sort("Literal"),attrs([term(cons("FloatLit"))]))])))]),module(unparameterized("LogicalAndExpressions"),[imports([module(unparameterized("OrExpressions"))])],[exports(conc-grammars(sorts([sort("LogicalAndExpr")]),context-free-syntax([prod([sort("OrExpr")],sort("LogicalAndExpr"),attrs([])),prod([sort("LogicalAndExpr"),lit("&&"),sort("OrExpr")],sort("LogicalAndExpr"),attrs([term(cons("LogicalAnd"))]))])))]),module(unparameterized("LogicalOrExpressions"),[imports([module(unparameterized("LogicalAndExpressions"))])],[exports(conc-grammars(sorts([sort("LogicalOrExpr")]),context-free-syntax([prod([sort("LogicalAndExpr")],sort("LogicalOrExpr"),attrs([])),prod([sort("LogicalOrExpr"),lit("||"),sort("LogicalAndExpr")],sort("LogicalOrExpr"),attrs([term(cons("LogicalOr"))]))])))]),module(unparameterized("MultiplicativeExpressions"),[imports([module(unparameterized("CastExpressions"))])],[exports(conc-grammars(sorts([sort("MultiplicativeExpr")]),context-free-syntax([prod([sort("CastExpr")],sort("MultiplicativeExpr"),attrs([])),prod([sort("MultiplicativeExpr"),lit("*"),sort("CastExpr")],sort("MultiplicativeExpr"),attrs([term(cons("Mul"))])),prod([sort("MultiplicativeExpr"),lit("/"),sort("CastExpr")],sort("MultiplicativeExpr"),attrs([term(cons("Div"))])),prod([sort("MultiplicativeExpr"),lit("%"),sort("CastExpr")],sort("MultiplicativeExpr"),attrs([term(cons("Mod"))]))])))]),module(unparameterized("ParameterDeclarations"),[imports([module(unparameterized("AssignmentExpressions")),module(unparameterized("Declarators")),module(unparameterized("Specifiers")),module(unparameterized("TypeIds"))])],[exports(sorts([sort("ParameterList"),sort("ParameterDeclaration")])),exports(conc-grammars(sorts([sort("ParameterTypeList")]),context-free-syntax([prod([sort("ParameterList")],sort("ParameterTypeList"),attrs([])),prod([sort("ParameterList"),lit(","),lit("...")],sort("ParameterTypeList"),attrs([term(cons("VarArgs"))])),prod([label(unquoted("pd"),iter-sep(sort("ParameterDeclaration"),lit(",")))],sort("ParameterList"),attrs([term(cons("ParamList"))])),prod([sort("DeclarationSpecifierSeq"),sort("Declarator")],sort("ParameterDeclaration"),attrs([term(cons("ParamDec"))])),prod([sort("DeclarationSpecifierSeq"),label(unquoted("ad"),opt(sort("AbstractDeclarator")))],sort("ParameterDeclaration"),attrs([term(cons("ParamDecAbstr")),avoid]))])))]),module(unparameterized("PostfixExpressions"),[imports([module(unparameterized("AssignmentExpressions")),module(unparameterized("Expressions")),module(unparameterized("Initializers")),module(unparameterized("PrimaryExpressions")),module(unparameterized("TypeIds"))])],[exports(conc-grammars(sorts([sort("PostfixExpr")]),context-free-syntax([prod([sort("PrimaryExpr")],sort("PostfixExpr"),attrs([term(cons("PrimaryExpr"))])),prod([sort("PostfixExpr"),lit("["),sort("Expr"),lit("]")],sort("PostfixExpr"),attrs([term(cons("ArraySubscript"))])),prod([sort("PostfixExpr"),lit("("),label(unquoted("expr"),opt(sort("Expr"))),lit(")")],sort("PostfixExpr"),attrs([term(cons("Call"))])),prod([sort("PostfixExpr"),lit("."),sort("Identifier")],sort("PostfixExpr"),attrs([term(cons("MemberAccess"))])),prod([sort("PostfixExpr"),lit("->"),sort("Identifier")],sort("PostfixExpr"),attrs([term(cons("PMemberAccess"))])),prod([sort("PostfixExpr"),lit("++")],sort("PostfixExpr"),attrs([term(cons("PostIncr"))])),prod([sort("PostfixExpr"),lit("--")],sort("PostfixExpr"),attrs([term(cons("PostDecr"))])),prod([lit("("),sort("TypeName"),lit(")"),lit("{"),sort("InitializerList"),lit("}")],sort("PostfixExpr"),attrs([term(cons("PostfixExpr"))])),prod([lit("("),sort("TypeName"),lit(")"),lit("{"),sort("InitializerList"),lit(","),lit("}")],sort("PostfixExpr"),attrs([term(cons("PostfixExprTrComma"))]))])))]),module(unparameterized("PrimaryExpressions"),[imports([module(unparameterized("Expressions")),module(unparameterized("Literals"))])],[exports(conc-grammars(sorts([sort("PrimaryExpr")]),context-free-syntax([prod([sort("Identifier")],sort("PrimaryExpr"),attrs([])),prod([sort("Literal")],sort("PrimaryExpr"),attrs([term(cons("Lit"))])),prod([iter(sort("StringLiteral"))],sort("PrimaryExpr"),attrs([term(cons("StringLitSeq"))])),prod([lit("("),sort("Expr"),lit(")")],sort("PrimaryExpr"),attrs([term(cons("ParenExpr"))]))])))]),module(unparameterized("RelationalExpressions"),[imports([module(unparameterized("ShiftExpressions"))])],[exports(conc-grammars(sorts([sort("RelationalExpr")]),context-free-syntax([prod([sort("ShiftExpr")],sort("RelationalExpr"),attrs([])),prod([sort("RelationalExpr"),lit("<"),sort("ShiftExpr")],sort("RelationalExpr"),attrs([term(cons("Lt"))])),prod([sort("RelationalExpr"),lit(">"),sort("ShiftExpr")],sort("RelationalExpr"),attrs([term(cons("Gt"))])),prod([sort("RelationalExpr"),lit("<="),sort("ShiftExpr")],sort("RelationalExpr"),attrs([term(cons("LtEq"))])),prod([sort("RelationalExpr"),lit(">="),sort("ShiftExpr")],sort("RelationalExpr"),attrs([term(cons("GtEq"))]))])))]),module(unparameterized("SelectionStatements"),[imports([module(unparameterized("AssignmentExpressions")),module(unparameterized("Expressions")),module(unparameterized("Statements"))])],[exports(conc-grammars(sorts([sort("SelectionStm")]),context-free-syntax([prod([lit("if"),lit("("),sort("Expr"),lit(")"),sort("Stm")],sort("SelectionStm"),attrs([term(cons("If")),prefer])),prod([lit("if"),lit("("),sort("Expr"),lit(")"),label(unquoted("st1"),sort("Stm")),lit("else"),label(unquoted("st2"),sort("Stm"))],sort("SelectionStm"),attrs([term(cons("If"))])),prod([lit("switch"),lit("("),sort("Expr"),lit(")"),sort("Stm")],sort("SelectionStm"),attrs([term(cons("Switch"))]))])))]),module(unparameterized("ShiftExpressions"),[imports([module(unparameterized("AdditiveExpressions"))])],[exports(conc-grammars(sorts([sort("ShiftExpr")]),context-free-syntax([prod([sort("AdditiveExpr")],sort("ShiftExpr"),attrs([])),prod([sort("ShiftExpr"),lit("<<"),sort("AdditiveExpr")],sort("ShiftExpr"),attrs([term(cons("LeftShift"))])),prod([sort("ShiftExpr"),lit(">>"),sort("AdditiveExpr")],sort("ShiftExpr"),attrs([term(cons("RightShift"))]))])))]),module(unparameterized("SpecifierQualifiers"),[imports([module(unparameterized("TypeQualifiers")),module(unparameterized("TypeSpecifiers"))])],[exports(sorts([sort("SpecifierQualifier")])),exports(conc-grammars(sorts([sort("SpecifierQualifierList")]),context-free-syntax([prod([sort("TypeSpecifier")],sort("SpecifierQualifier"),attrs([term(cons("TypeSpecifier"))])),prod([sort("TypeQualifier")],sort("SpecifierQualifier"),attrs([term(cons("TypeQualifier"))])),prod([label(unquoted("sq"),iter(sort("SpecifierQualifier")))],sort("SpecifierQualifierList"),attrs([term(cons("SpecifierQualifierList"))]))])))]),module(unparameterized("Specifiers"),[imports([module(unparameterized("FunctionSpecifiers")),module(unparameterized("StorageClassSpecifiers")),module(unparameterized("TypeSpecifiers")),module(unparameterized("TypeQualifiers"))])],[exports(conc-grammars(sorts([sort("DeclarationSpecifier"),sort("DeclarationSpecifierSeq")]),context-free-syntax([prod([sort("StorageClassSpecifier")],sort("DeclarationSpecifier"),attrs([term(cons("StorageClassSpecifier"))])),prod([sort("TypeSpecifier")],sort("DeclarationSpecifier"),attrs([term(cons("TypeSpecifier"))])),prod([sort("TypeQualifier")],sort("DeclarationSpecifier"),attrs([term(cons("TypeQualifier"))])),prod([sort("FunctionSpecifier")],sort("DeclarationSpecifier"),attrs([term(cons("FunSpecifier"))])),prod([label(unquoted("decls"),iter(sort("DeclarationSpecifier")))],sort("DeclarationSpecifierSeq"),attrs([term(cons("DecSpecifierSeq"))]))])))]),module(unparameterized("Statements"),[imports([module(unparameterized("CompoundStatements")),module(unparameterized("ExpressionStatements")),module(unparameterized("IterationStatements")),module(unparameterized("JumpStatements")),module(unparameterized("LabeledStatements")),module(unparameterized("SelectionStatements"))])],[exports(conc-grammars(sorts([sort("Stm")]),context-free-syntax([prod([sort("LabeledStm")],sort("Stm"),attrs([term(cons("LabeledStm"))])),prod([sort("CompoundStm")],sort("Stm"),attrs([])),prod([sort("ExprStm")],sort("Stm"),attrs([])),prod([sort("SelectionStm")],sort("Stm"),attrs([term(cons("SelectionStm"))])),prod([sort("IterationStm")],sort("Stm"),attrs([term(cons("IterationStm"))])),prod([sort("JumpStm")],sort("Stm"),attrs([term(cons("JumpStm"))]))])))]),module(unparameterized("StorageClassSpecifiers"),[imports([])],[exports(conc-grammars(sorts([sort("StorageClassSpecifier")]),context-free-syntax([prod([lit("typedef")],sort("StorageClassSpecifier"),attrs([term(cons("Typedef"))])),prod([lit("auto")],sort("StorageClassSpecifier"),attrs([term(cons("Auto"))])),prod([lit("register")],sort("StorageClassSpecifier"),attrs([term(cons("Register"))])),prod([lit("static")],sort("StorageClassSpecifier"),attrs([term(cons("Static"))])),prod([lit("extern")],sort("StorageClassSpecifier"),attrs([term(cons("Extern"))]))])))]),module(unparameterized("StringLiterals"),[imports([module(unparameterized("Characters")),module(unparameterized("EscapeSequences"))])],[exports(sorts([sort("STRING-LITERAL"),sort("S-CHAR"),sort("S-CHAR-SEQUENCE")])),exports(conc-grammars(conc-grammars(sorts([sort("StringLiteral")]),lexical-syntax([prod([lit("\\\""),opt(sort("S-CHAR-SEQUENCE")),lit("\\\"")],sort("STRING-LITERAL"),attrs([])),prod([lit("L\\\""),opt(sort("S-CHAR-SEQUENCE")),lit("\\\"")],sort("STRING-LITERAL"),attrs([])),prod([iter(sort("S-CHAR"))],sort("S-CHAR-SEQUENCE"),attrs([])),prod([sort("S-SOURCE-CHARACTER")],sort("S-CHAR"),attrs([])),prod([sort("ESCAPE-SEQUENCE")],sort("S-CHAR"),attrs([])),prod([sort("UNIVERSAL-CHARACTER-NAME")],sort("S-CHAR"),attrs([]))])),context-free-syntax([prod([sort("STRING-LITERAL")],sort("StringLiteral"),attrs([]))])))]),module(unparameterized("StructOrUnionSpecifiers"),[imports([module(unparameterized("AssignmentExpressions")),module(unparameterized("ConstantExpressions")),module(unparameterized("Declarators")),module(unparameterized("Identifiers")),module(unparameterized("SpecifierQualifiers"))])],[exports(sorts([sort("StructDeclaration"),sort("StructDeclarator"),sort("StructDeclaratorList"),sort("StructDeclarationList"),sort("StructOrUnion")])),exports(conc-grammars(sorts([sort("StructOrUnionSpecifier")]),context-free-syntax([prod([sort("StructOrUnion"),label(unquoted("ident"),opt(sort("Identifier"))),lit("{"),sort("StructDeclarationList"),lit("}")],sort("StructOrUnionSpecifier"),attrs([term(cons("StructOrUnionDec"))])),prod([sort("StructOrUnion"),sort("Identifier")],sort("StructOrUnionSpecifier"),attrs([term(cons("StructOrUnionSpecifier"))])),prod([lit("struct")],sort("StructOrUnion"),attrs([term(cons("Struct"))])),prod([lit("union")],sort("StructOrUnion"),attrs([term(cons("Union"))])),prod([label(unquoted("st"),iter(sort("StructDeclaration")))],sort("StructDeclarationList"),attrs([term(cons("StructDecList"))])),prod([sort("SpecifierQualifierList"),sort("StructDeclaratorList"),lit(";")],sort("StructDeclaration"),attrs([term(cons("StructDec"))])),prod([label(unquoted("st"),iter-sep(sort("StructDeclarator"),lit(",")))],sort("StructDeclaratorList"),attrs([term(cons("StructDeclList"))])),prod([sort("Declarator")],sort("StructDeclarator"),attrs([])),prod([label(unquoted("dl"),opt(sort("Declarator"))),lit(":"),sort("ConstantExpr")],sort("StructDeclarator"),attrs([term(cons("StructDeclarator"))]))])))]),module(unparameterized("TranslationUnits"),[imports([module(unparameterized("Declarations")),module(unparameterized("Includes"))])],[exports(sorts([sort("ExternalDeclarationSeq")])),exports(conc-grammars(conc-grammars(sorts([sort("TranslationUnit"),sort("ExternalDeclaration")]),context-free-syntax([prod([opt(sort("ExternalDeclarationSeq"))],sort("TranslationUnit"),attrs([term(cons("TranslationUnit"))])),prod([label(unquoted("ed"),iter(sort("ExternalDeclaration")))],sort("ExternalDeclarationSeq"),attrs([term(cons("ExtDecSeq"))])),prod([sort("FunctionDefinition")],sort("ExternalDeclaration"),attrs([])),prod([sort("Declaration")],sort("ExternalDeclaration"),attrs([term(cons("ExtDec"))])),prod([sort("Include")],sort("ExternalDeclaration"),attrs([]))])),context-free-start-symbols([sort("ExternalDeclarationSeq")])))]),module(unparameterized("TypeIds"),[imports([module(unparameterized("AssignmentExpressions")),module(unparameterized("ParameterDeclarations")),module(unparameterized("TypeQualifiers")),module(unparameterized("TypeSpecifiers"))])],[exports(conc-grammars(conc-grammars(sorts([sort("TypeName"),sort("AbstractDeclarator"),sort("DirectAbstractDeclarator")]),context-free-syntax([prod([sort("SpecifierQualifierList"),label(unquoted("ad"),opt(sort("AbstractDeclarator")))],sort("TypeName"),attrs([term(cons("TypeName"))])),prod([sort("PointerSeq")],sort("AbstractDeclarator"),attrs([])),prod([label(unquoted("pt"),opt(sort("PointerSeq"))),sort("DirectAbstractDeclarator")],sort("AbstractDeclarator"),attrs([term(cons("AbstrDeclPointer"))])),prod([lit("("),sort("AbstractDeclarator"),lit(")")],sort("DirectAbstractDeclarator"),attrs([term(cons("AbstrDeclPar"))])),prod([label(unquoted("dad"),opt(sort("DirectAbstractDeclarator"))),lit("["),label(unquoted("ae"),opt(sort("AssignmentExpr"))),lit("]")],sort("DirectAbstractDeclarator"),attrs([term(cons("AbstrDeclAssign"))])),prod([label(unquoted("dad"),opt(sort("DirectAbstractDeclarator"))),lit("["),lit("*"),lit("]")],sort("DirectAbstractDeclarator"),attrs([term(cons("AbstrDeclDeref"))])),prod([label(unquoted("dad"),opt(sort("DirectAbstractDeclarator"))),lit("("),label(unquoted("ptl"),opt(sort("ParameterTypeList"))),lit(")")],sort("DirectAbstractDeclarator"),attrs([term(cons("AbstrDeclParamTypes"))]))])),lexical-restrictions([follow([lit("+")],single(char-class(simple-charclass(present(short("\\+")))))),follow([lit("-")],single(char-class(simple-charclass(present(short("\\-"))))))])))]),module(unparameterized("TypeQualifiers"),[],[exports(conc-grammars(sorts([sort("TypeQualifier"),sort("TypeQualifierList")]),context-free-syntax([prod([lit("const")],sort("TypeQualifier"),attrs([term(cons("Const"))])),prod([lit("restrict")],sort("TypeQualifier"),attrs([term(cons("Restrict"))])),prod([lit("volatile")],sort("TypeQualifier"),attrs([term(cons("Volatile"))])),prod([iter(sort("TypeQualifier"))],sort("TypeQualifierList"),attrs([term(cons("TypeQualifierList"))]))])))]),module(unparameterized("TypeSpecifiers"),[imports([module(unparameterized("EnumSpecifiers")),module(unparameterized("Identifiers")),module(unparameterized("StructOrUnionSpecifiers")),module(unparameterized("TypeQualifiers"))])],[exports(sorts([sort("TypedefName")])),exports(conc-grammars(sorts([sort("TypeSpecifier")]),context-free-syntax([prod([lit("void")],sort("TypeSpecifier"),attrs([term(cons("Void"))])),prod([lit("char")],sort("TypeSpecifier"),attrs([term(cons("Char"))])),prod([lit("short")],sort("TypeSpecifier"),attrs([term(cons("Short"))])),prod([lit("int")],sort("TypeSpecifier"),attrs([term(cons("Int"))])),prod([lit("long")],sort("TypeSpecifier"),attrs([term(cons("Long"))])),prod([lit("float")],sort("TypeSpecifier"),attrs([term(cons("Float"))])),prod([lit("double")],sort("TypeSpecifier"),attrs([term(cons("Double"))])),prod([lit("signed")],sort("TypeSpecifier"),attrs([term(cons("Signed"))])),prod([lit("unsigned")],sort("TypeSpecifier"),attrs([term(cons("Unsigned"))])),prod([lit("_Bool")],sort("TypeSpecifier"),attrs([term(cons("Bool"))])),prod([lit("_Complex")],sort("TypeSpecifier"),attrs([term(cons("Complex"))])),prod([lit("_Imaginary")],sort("TypeSpecifier"),attrs([term(cons("Imaginary"))])),prod([sort("StructOrUnionSpecifier")],sort("TypeSpecifier"),attrs([term(cons("StructOrUnion"))])),prod([sort("EnumSpecifier")],sort("TypeSpecifier"),attrs([term(cons("Enum"))])),prod([sort("TypedefName")],sort("TypeSpecifier"),attrs([term(cons("TypedefName"))])),prod([sort("Identifier")],sort("TypedefName"),attrs([]))])))]),module(unparameterized("UnaryExpressions"),[imports([module(unparameterized("CastExpressions")),module(unparameterized("PostfixExpressions")),module(unparameterized("TypeIds"))])],[exports(sorts([sort("UnaryOperator")])),exports(conc-grammars(sorts([sort("UnaryExpr")]),context-free-syntax([prod([sort("PostfixExpr")],sort("UnaryExpr"),attrs([])),prod([lit("++"),sort("UnaryExpr")],sort("UnaryExpr"),attrs([term(cons("PreIncr"))])),prod([lit("--"),sort("UnaryExpr")],sort("UnaryExpr"),attrs([term(cons("PreDecr"))])),prod([sort("UnaryOperator"),sort("CastExpr")],sort("UnaryExpr"),attrs([term(cons("CastExpr"))])),prod([lit("sizeof"),sort("UnaryExpr")],sort("UnaryExpr"),attrs([term(cons("SizeOf"))])),prod([lit("sizeof"),lit("("),sort("TypeName"),lit(")")],sort("UnaryExpr"),attrs([term(cons("SizeOfType"))])),prod([lit("*")],sort("UnaryOperator"),attrs([term(cons("Deref"))])),prod([lit("&")],sort("UnaryOperator"),attrs([term(cons("Ref"))])),prod([lit("+")],sort("UnaryOperator"),attrs([term(cons("Plus"))])),prod([lit("-")],sort("UnaryOperator"),attrs([term(cons("Minus"))])),prod([lit("!")],sort("UnaryOperator"),attrs([term(cons("Not"))])),prod([lit("~")],sort("UnaryOperator"),attrs([term(cons("Complement"))]))])))]),module(unparameterized("Includes"),[imports([module(unparameterized("StringLiterals"))])],[exports(conc-grammars(sorts([sort("IncludeFile")]),lexical-syntax([prod([opt(sort("S-CHAR-SEQUENCE"))],sort("IncludeFile"),attrs([]))]))),exports(conc-grammars(sorts([sort("Include")]),context-free-syntax([prod([lit("#"),lit("include"),lit("<"),sort("IncludeFile"),lit(">")],sort("Include"),attrs([term(cons("StdInclude"))])),prod([lit("#"),lit("include"),lit("\\\""),sort("IncludeFile"),lit("\\\"")],sort("Include"),attrs([term(cons("Include"))]))])))]),module(unparameterized("C"),[imports([module(unparameterized("AdditiveExpressions")),module(unparameterized("AndExpressions")),module(unparameterized("AssignmentExpressions")),module(unparameterized("MainC")),module(unparameterized("CastExpressions")),module(unparameterized("CharLiterals")),module(unparameterized("Characters")),module(unparameterized("CompoundStatements")),module(unparameterized("CondExpressions")),module(unparameterized("ConstantExpressions")),module(unparameterized("Declarations")),module(unparameterized("Declarators")),module(unparameterized("Designations")),module(unparameterized("EnumSpecifiers")),module(unparameterized("EqualityExpressions")),module(unparameterized("EscapeSequences")),module(unparameterized("ExclusiveOrExpressions")),module(unparameterized("Expressions")),module(unparameterized("ExpressionStatements")),module(unparameterized("FloatLiterals")),module(unparameterized("FunctionDefinitions")),module(unparameterized("FunctionSpecifiers")),module(unparameterized("Identifiers")),module(unparameterized("OrExpressions")),module(unparameterized("InitDeclarators")),module(unparameterized("Initializers")),module(unparameterized("IntLiterals")),module(unparameterized("IterationStatements")),module(unparameterized("JumpStatements")),module(unparameterized("Keywords")),module(unparameterized("LabeledStatements")),module(unparameterized("Layout")),module(unparameterized("Literals")),module(unparameterized("LogicalAndExpressions")),module(unparameterized("LogicalOrExpressions")),module(unparameterized("MultiplicativeExpressions")),module(unparameterized("ParameterDeclarations")),module(unparameterized("PostfixExpressions")),module(unparameterized("PrimaryExpressions")),module(unparameterized("RelationalExpressions")),module(unparameterized("SelectionStatements")),module(unparameterized("ShiftExpressions")),module(unparameterized("SpecifierQualifiers")),module(unparameterized("Specifiers")),module(unparameterized("Statements")),module(unparameterized("StorageClassSpecifiers")),module(unparameterized("StringLiterals")),module(unparameterized("StructOrUnionSpecifiers")),module(unparameterized("TranslationUnits")),module(unparameterized("TypeIds")),module(unparameterized("TypeQualifiers")),module(unparameterized("TypeSpecifiers")),module(unparameterized("UnaryExpressions")),module(unparameterized("Includes"))])],[exports(context-free-start-symbols([sort("TranslationUnit"),sort("ExternalDeclarationSeq")]))]),module(unparameterized("org/sugarj/languages/C"),[imports([renamed-module(unparameterized("C"),renamings([symbol(sort("AdditiveExpr"),sort("CAdditiveExpr")),symbol(sort("AndExpr"),sort("CAndExpr")),symbol(sort("AssignmentExpr"),sort("CAssignmentExpr")),symbol(sort("AssignmentOperator"),sort("CAssignmentOperator")),symbol(sort("CastExpr"),sort("CCastExpr")),symbol(sort("CharLiteral"),sort("CCharLiteral")),symbol(sort("CompoundStm"),sort("CCompoundStm")),symbol(sort("BlockItemList"),sort("CBlockItemList")),symbol(sort("BlockItem"),sort("CBlockItem")),symbol(sort("CondExpr"),sort("CCondExpr")),symbol(sort("ConstantExpr"),sort("CConstantExpr")),symbol(sort("Declaration"),sort("CDeclaration")),symbol(sort("Declarator"),sort("CDeclarator")),symbol(sort("DirectDeclarator"),sort("CDirectDeclarator")),symbol(sort("PointerSeq"),sort("CPointerSeq")),symbol(sort("Pointer"),sort("CPointer")),symbol(sort("IdentifierList"),sort("CIdentifierList")),symbol(sort("Designation"),sort("CDesignation")),symbol(sort("DesignatorList"),sort("CDesignatorList")),symbol(sort("Designator"),sort("CDesignator")),symbol(sort("EnumSpecifier"),sort("CEnumSpecifier")),symbol(sort("EnumeratorList"),sort("CEnumeratorList")),symbol(sort("EnumeratorDefinition"),sort("CEnumeratorDefinition")),symbol(sort("EnumerationConstant"),sort("CEnumerationConstant")),symbol(sort("EqualityExpr"),sort("CEqualityExpr")),symbol(sort("ExclusiveOrExpr"),sort("CExclusiveOrExpr")),symbol(sort("Expr"),sort("CExpr")),symbol(sort("ExprStm"),sort("CExprStm")),symbol(sort("FloatLiteral"),sort("CFloatLiteral")),symbol(sort("FunctionDefinition"),sort("CFunctionDefinition")),symbol(sort("DeclarationList"),sort("CDeclarationList")),symbol(sort("FunctionSpecifier"),sort("CFunctionSpecifier")),symbol(sort("Identifier"),sort("CIdentifier")),symbol(sort("OrExpr"),sort("COrExpr")),symbol(sort("InitDeclaratorList"),sort("CInitDeclaratorList")),symbol(sort("InitDeclarator"),sort("CInitDeclarator")),symbol(sort("Initializer"),sort("CInitializer")),symbol(sort("InitializerSeq"),sort("CInitializerSeq")),symbol(sort("InitializerList"),sort("CInitializerList")),symbol(sort("IterationStm"),sort("CIterationStm")),symbol(sort("JumpStm"),sort("CJumpStm")),symbol(sort("LabeledStm"),sort("CLabeledStm")),symbol(sort("Literal"),sort("CLiteral")),symbol(sort("LogicalAndExpr"),sort("CLogicalAndExpr")),symbol(sort("LogicalOrExpr"),sort("CLogicalOrExpr")),symbol(sort("MultiplicativeExpr"),sort("CMultiplicativeExpr")),symbol(sort("ParameterTypeList"),sort("CParameterTypeList")),symbol(sort("ParameterList"),sort("CParameterList")),symbol(sort("ParameterDeclaration"),sort("CParameterDeclaration")),symbol(sort("PostfixExpr"),sort("CPostfixExpr")),symbol(sort("PrimaryExpr"),sort("CPrimaryExpr")),symbol(sort("RelationalExpr"),sort("CRelationalExpr")),symbol(sort("SelectionStm"),sort("CSelectionStm")),symbol(sort("ShiftExpr"),sort("CShiftExpr")),symbol(sort("SpecifierQualifier"),sort("CSpecifierQualifier")),symbol(sort("SpecifierQualifierList"),sort("CSpecifierQualifierList")),symbol(sort("DeclarationSpecifier"),sort("CDeclarationSpecifier")),symbol(sort("DeclarationSpecifierSeq"),sort("CDeclarationSpecifierSeq")),symbol(sort("Stm"),sort("CStm")),symbol(sort("StorageClassSpecifier"),sort("CStorageClassSpecifier")),symbol(sort("StringLiteral"),sort("CStringLiteral")),symbol(sort("StructOrUnionSpecifier"),sort("CStructOrUnionSpecifier")),symbol(sort("StructOrUnion"),sort("CStructOrUnion")),symbol(sort("StructDeclarationList"),sort("CStructDeclarationList")),symbol(sort("StructDeclaration"),sort("CStructDeclaration")),symbol(sort("StructDeclaratorList"),sort("CStructDeclaratorList")),symbol(sort("StructDeclarator"),sort("CStructDeclarator")),symbol(sort("TranslationUnit"),sort("CTranslationUnit")),symbol(sort("ExternalDeclarationSeq"),sort("CExternalDeclarationSeq")),symbol(sort("ExternalDeclaration"),sort("CExternalDeclaration")),symbol(sort("TypeName"),sort("CTypeName")),symbol(sort("AbstractDeclarator"),sort("CAbstractDeclarator")),symbol(sort("DirectAbstractDeclarator"),sort("CDirectAbstractDeclarator")),symbol(sort("TypeQualifier"),sort("CTypeQualifier")),symbol(sort("TypeQualifierList"),sort("CTypeQualifierList")),symbol(sort("TypeSpecifier"),sort("CTypeSpecifier")),symbol(sort("TypedefName"),sort("CTypedefName")),symbol(sort("UnaryExpr"),sort("CUnaryExpr")),symbol(sort("UnaryOperator"),sort("CUnaryOperator")),symbol(sort("Include"),sort("CInclude"))]))])],[])])