Module("disamb",[Imports([Import("libstratego-lib"),Import("libstratego-aterm"),Import("libstratego-sglr"),Import("include/C")]),Strategies([SDefNoArgs("disamb",Seq(GenDynRules([DynRuleAssign(DynRuleId(RDecNoArgs("td-names")),NoAnnoList(List([])))]),Call(SVar("traverse"),[Call(SVar("try"),[CallNoArgs(SVar("disamb-typedef"))])]))),SDef("traverse",[DefaultVarDec("s")],Seq(CallNoArgs(SVar("s")),All(LChoice(Call(SVar("enter-scope"),[CallNoArgs(SVar("s"))]),Call(SVar("traverse"),[CallNoArgs(SVar("s"))]))))),SDefNoArgs("disamb-typedef",LChoice(Seq(CallNoArgs(SVar("resolve-amb")),Call(SVar("try"),[CallNoArgs(SVar("collect-name"))])),CallNoArgs(SVar("collect-name")))),SDefNoArgs("collect-name",LChoice(CallNoArgs(SVar("collect-td-name")),CallNoArgs(SVar("collect-id")))),SDef("enter-scope",[DefaultVarDec("s")],Seq(LChoice(Match(NoAnnoList(Op("FunDef",[Wld,Wld,Wld,Wld]))),LChoice(Match(NoAnnoList(Op("Block",[Wld]))),Match(NoAnnoList(Op("ForDec",[Wld,Wld,Wld,Wld]))))),DynRuleScope([DynRuleScopeId("td-names")],Call(SVar("traverse"),[CallNoArgs(SVar("s"))])))),SDefNoArgs("collect-td-name",Seq(Match(NoAnnoList(Op("Dec",[NoAnnoList(Op("DecSpecifierSeq",[NoAnnoList(List([NoAnnoList(Op("StorageClassSpecifier",[NoAnnoList(Op("Typedef",[]))])),Wld]))])),NoAnnoList(Op("Some",[Var("inits")]))]))),CallT(SVar("update-td-names"),[CallNoArgs(SVar("union"))],[App(CallNoArgs(SVar("collect-decl-ids")),Var("inits"))]))),SDefNoArgs("collect-id",LChoice(Seq(Match(NoAnnoList(Op("Dec",[Wld,NoAnnoList(Op("Some",[Var("inits")]))]))),CallT(SVar("update-td-names"),[CallNoArgs(SVar("diff"))],[App(CallNoArgs(SVar("collect-decl-ids")),Var("inits"))])),Seq(Match(NoAnnoList(Op("ParamDec",[Wld,Var("decl")]))),CallT(SVar("update-td-names"),[CallNoArgs(SVar("diff"))],[NoAnnoList(List([App(CallNoArgs(SVar("extract-decl-id")),Var("decl"))]))])))),SDefT("update-td-names",[DefaultVarDec("s")],[DefaultVarDec("ids")],GenDynRules([DynRuleAssign(DynRuleId(RDecNoArgs("td-names")),App(CallNoArgs(SVar("s")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("td-names"))),Var("ids")]))))])),SDefNoArgs("collect-decl-ids",Seq(Match(NoAnnoList(Op("InitDeclaratorList",[Var("decls")]))),BA(Call(SVar("foldl"),[LRule(RuleNoCond(NoAnnoList(Tuple([Var("decl"),Var("ids")])),App(CallNoArgs(SVar("union")),NoAnnoList(Tuple([Var("ids"),NoAnnoList(List([App(CallNoArgs(SVar("extract-decl-id")),Var("decl"))]))])))))]),NoAnnoList(Tuple([Var("decls"),NoAnnoList(List([]))]))))),SDefNoArgs("extract-decl-id",Seq(LChoice(Match(NoAnnoList(Op("Declarator",[Wld,Var("dd")]))),Match(NoAnnoList(Op("InitDeclarator",[NoAnnoList(Op("Declarator",[Wld,Var("dd")])),Wld])))),BA(Call(SVar("collect-one"),[Match(NoAnnoList(Op("Id",[Wld])))]),Var("dd")))),SDefNoArgs("contains-invalid-name",LChoice(Seq(Call(SVar("collect-all"),[Seq(Match(NoAnnoList(Op("TypedefName",[Var("n")]))),Not(BA(CallNoArgs(SVar("elem")),NoAnnoList(Tuple([Var("n"),RootApp(CallNoArgs(SVar("td-names")))])))))]),Not(Match(NoAnnoList(List([]))))),Seq(Call(SVar("collect-all"),[Seq(Not(Match(NoAnnoList(Op("TypedefName",[Wld])))),One(BA(CallNoArgs(SVar("elem")),NoAnnoList(Tuple([RootApp(Id),RootApp(CallNoArgs(SVar("td-names")))])))))]),Not(Match(NoAnnoList(List([])))))))]),Rules([RDefNoArgs("resolve-amb",Rule(As(Var("a"),NoAnnoList(Op("amb",[NoAnnoList(List([Var("x"),Var("y")]))]))),Var("res"),[WithClause(Seq(Assign(NoAnnoList(Op("amb",[NoAnnoList(List([Var("x'"),Var("y'")]))])),App(Rec("x",All(LChoice(CallNoArgs(SVar("resolve-amb")),CallNoArgs(SVar("x"))))),Var("a"))),Assign(Var("res"),RootApp(Call(SVar("if"),[BA(CallNoArgs(SVar("contains-invalid-name")),Var("x'")),Build(Var("y'")),Build(Var("x'"))])))))]))])])