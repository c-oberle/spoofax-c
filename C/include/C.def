definition
%%
%% AdditiveExpressions.esdf:
%% this file is a part of C-Grammar from the Transformers project.
%% Copyright (C) 2004, 2005, 2006 EPITA Research and Development Laboratory.
%%
%% Transformers is free software; you can redistribute it and/or modify
%% it under the terms of the GNU General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or
%% (at your option) any later version.
%%
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%%
%% You should have received a copy of the GNU General Public License
%% along with this program; if not, write to the Free Software
%% Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
%%
module AdditiveExpressions

imports

  MultiplicativeExpressions

exports

  sorts
    AdditiveExpr

  context-free syntax

    %% 6.5.6
    MultiplicativeExpr                  -> AdditiveExpr

    AdditiveExpr "+" MultiplicativeExpr -> AdditiveExpr {cons("Plus")}
    AdditiveExpr "-" MultiplicativeExpr -> AdditiveExpr {cons("Minus")}
    
%%
%% AndExpressions.esdf:

module AndExpressions

imports

  EqualityExpressions

exports

  sorts
    AndExpr

  context-free syntax

    %% 6.5.10
    EqualityExpr                    -> AndExpr
    AndExpr "&" EqualityExpr 		-> AndExpr {cons("And")}

  context-free restrictions
    "&" -/- [\&]
    
%%
%% AssignmentExpressions.esdf:

module AssignmentExpressions

imports

  CondExpressions

exports

  sorts
    AssignmentOperator

exports

  sorts
    AssignmentExpr

  context-free syntax

    %% 6.5.16
    CondExpr                       					-> AssignmentExpr
    UnaryExpr AssignmentOperator AssignmentExpr		-> AssignmentExpr {cons("Assign")}


    %% 6.5.16
    "="   -> AssignmentOperator {cons("AssignOp")}
    "*="  -> AssignmentOperator {cons("AssignOpMul")}
    "/="  -> AssignmentOperator {cons("AssignOpDiv")}
    "%="  -> AssignmentOperator {cons("AssignOpMod")}
    "+="  -> AssignmentOperator {cons("AssignOpPlus")}
    "-="  -> AssignmentOperator {cons("AssignOpMinus")}
    ">>=" -> AssignmentOperator {cons("AssignOpShiftR")}
    "<<=" -> AssignmentOperator {cons("AssignOpShiftL")}
    "&="  -> AssignmentOperator {cons("AssignOpAnd")}
    "^="  -> AssignmentOperator {cons("AssignOpXor")}
    "|="  -> AssignmentOperator {cons("AssignOpOr")}
    
%%
%% C.esdf:

module MainC

imports

  TranslationUnits

exports

  context-free start-symbols
    TranslationUnit
    ExternalDeclarationSeq
    
%%
%% CastExpressions.esdf:

module CastExpressions

imports

  UnaryExpressions

exports

  sorts
    CastExpr

  context-free syntax

    %% 6.5.4
    UnaryExpr                                 -> CastExpr
    "(" TypeName ")" CastExpr                 -> CastExpr {cons("Cast")}
    
%%
%% CharLiterals.esdf:

module CharLiterals

imports

  Characters
  EscapeSequences

exports

  sorts
    CHARACTER-LITERAL
    C-CHAR-SEQUENCE
    C-CHAR

exports

  sorts
    CharLiteral

  lexical syntax

    %% 2.13.2 [lex.ccon]
    "'" C-CHAR-SEQUENCE "'"  -> CHARACTER-LITERAL
    "L'" C-CHAR-SEQUENCE "'" -> CHARACTER-LITERAL

    %% 2.13.2 [lex.ccon]
    C-CHAR+ -> C-CHAR-SEQUENCE

    %% 2.13.2 [lex.ccon]
    C-SOURCE-CHARACTER       -> C-CHAR
    ESCAPE-SEQUENCE          -> C-CHAR
    UNIVERSAL-CHARACTER-NAME -> C-CHAR

  context-free syntax

    CHARACTER-LITERAL -> CharLiteral
%%
%% Characters.esdf:

module Characters

imports

  Layout

exports

  sorts
    DIGIT
    NON-DIGIT
    NONZERO-DIGIT
    SOURCE-CHARACTER
    S-SOURCE-CHARACTER
    C-SOURCE-CHARACTER
    OCTAL-DIGIT
    LOW-OCTAL-DIGIT
    HIGH-OCTAL-DIGIT
    HEXADECIMAL-DIGIT

  lexical syntax

    %% 2.2 [lex.charset]
    [a-zA-Z0-9\_\{\}\[\]\#\(\)\<\>\%\:\;\.\?\*\+\-\/\^\&\|\~\!\=\,\"\'\ \n\t\\]
                                                    -> SOURCE-CHARACTER

    [\0-\9]											-> S-SOURCE-CHARACTER
    %% 10 \n
    [\11-\12]										-> S-SOURCE-CHARACTER
    %% 13 \r
    [\14-\33]										-> S-SOURCE-CHARACTER
    %% 34 "
    [\35-\91]										-> S-SOURCE-CHARACTER
    %% 92 \
    [\93-\127]										-> S-SOURCE-CHARACTER
    [\192-\223][\128-\191]							-> S-SOURCE-CHARACTER
    [\224-\239][\128-\191][\128-\191]				-> S-SOURCE-CHARACTER
    [\240-\255][\128-\191][\128-\191][\128-\191]	-> S-SOURCE-CHARACTER


    [\0-\9]											-> C-SOURCE-CHARACTER
    %% 10 \n
    [\11-\12]										-> C-SOURCE-CHARACTER
    %% 13 \r
    [\14-\38]										-> C-SOURCE-CHARACTER
    %% 39 '
    [\40-\91]										-> C-SOURCE-CHARACTER
    %% 92 \
    [\93-\127]										-> C-SOURCE-CHARACTER
    [\192-\223][\128-\191]							-> C-SOURCE-CHARACTER
    [\224-\239][\128-\191][\128-\191]				-> C-SOURCE-CHARACTER
    [\240-\255][\128-\191][\128-\191][\128-\191]	-> C-SOURCE-CHARACTER

    %% 2.10 [lex.name]
    [0-9] -> DIGIT

    %% 2.10 [lex.name]
    [a-zA-Z\_] -> NON-DIGIT

    %% 2.13.1 [lex.icon]
    [1-9] -> NONZERO-DIGIT

    %% 2.13.1 [lex.icon]
    [0-7]       -> OCTAL-DIGIT
    [0-3]       -> LOW-OCTAL-DIGIT
    [4-7]       -> HIGH-OCTAL-DIGIT
    [0-9a-fA-F] -> HEXADECIMAL-DIGIT
%%
%% CompoundStatements.esdf:

module CompoundStatements

imports

  Statements

exports

  sorts
    BlockItemList
    BlockItem

exports

  sorts
    CompoundStm

  context-free syntax

    %% 6.8.2
    "{" bli:BlockItemList? "}"           -> CompoundStm {cons("Block")}

    %% 6.8.2
    BlockItem+                           -> BlockItemList {cons("BlockItems")}

    %% 6.8.2
    Stm                            		 -> BlockItem
    Declaration                          -> BlockItem
    
%%
%% CondExpressions.esdf:

module CondExpressions

imports

  AssignmentExpressions
  Expressions
  LogicalOrExpressions

exports

  sorts
    CondExpr

  context-free syntax

    %% 6.5.15
    LogicalOrExpr                   	    -> CondExpr
    LogicalOrExpr "?" Expr ":" CondExpr		-> CondExpr {cons("Cond")}
                                          
%%
%% ConstantExpressions.esdf:

module ConstantExpressions

imports

  CondExpressions

exports

  sorts
    ConstantExpr

  context-free syntax

    %% 6.6
    CondExpr 	-> ConstantExpr {cons("ConstExpr")}
    
%%
%% Declarations.esdf:

module Declarations

imports

  InitDeclarators
  FunctionDefinitions
  Specifiers

exports

  sorts
    Declaration

  context-free syntax

    %% 6.7
    DeclarationSpecifierSeq initd:InitDeclaratorList? ";" 	-> Declaration {cons("Dec")}
    
%%
%% Declarators.esdf:

module Declarators

imports

  ConstantExpressions
  TypeQualifiers
  ParameterDeclarations

exports

  sorts
    DirectDeclarator
    Pointer

exports

  sorts
    Declarator
    PointerSeq
    IdentifierList

  context-free syntax

    %% 6.7.5
    p:PointerSeq? DirectDeclarator                     -> Declarator {cons("Declarator")}

    %% 6.7.5
    Identifier                                         -> DirectDeclarator
    "(" Declarator ")"                                 -> DirectDeclarator {cons("DeclPar")}
    DirectDeclarator "[" tql:TypeQualifierList? as:AssignmentExpr? "]"
                                                       -> DirectDeclarator {cons("DeclQualifierAssign")}
    DirectDeclarator "[" "static" tql:TypeQualifierList? AssignmentExpr "]"
                                                       -> DirectDeclarator {cons("DeclStaticAssign")}
    DirectDeclarator "[" TypeQualifierList "static" AssignmentExpr "]"
                                                       -> DirectDeclarator {cons("DeclQualifierStaticAssign")}
    DirectDeclarator "[" tql:TypeQualifierList? "*" "]"
                                                       -> DirectDeclarator {cons("DeclTypeQualifiers")}
    DirectDeclarator "(" ParameterTypeList ")"         -> DirectDeclarator {cons("DeclParams")}
    DirectDeclarator "(" il:IdentifierList? ")"        -> DirectDeclarator {cons("DeclIds")}


    %% 6.7.5
     Pointer+                  			-> PointerSeq {cons("PointerSeq")}
     "*" tql:TypeQualifierList?     	-> Pointer {cons("Pointer")}

    %% 6.7.5
    { Identifier "," }+				-> IdentifierList {cons("IdentifierList")}


%%
%% Designations.esdf:

module Designations

imports

  ConstantExpressions
  Identifiers

exports

  sorts

    DesignatorList
    Designator

exports

  sorts

    Designation

  context-free syntax

    %% 6.7.8
    DesignatorList "="                 -> Designation {cons("Designation")}

    %% 6.7.8
    Designator+                        -> DesignatorList {cons("DesignatorList")}

    %% 6.7.8
    "[" ConstantExpr "]"         	   -> Designator {cons("BracketDesignator")}
    "." Identifier                     -> Designator {cons("DotDesignator")}
%%
%% EnumSpecifiers.esdf:

module EnumSpecifiers

imports

  Identifiers
  ConstantExpressions

exports

  sorts
    EnumeratorList
    EnumeratorDefinition

exports

  sorts
    EnumSpecifier
    EnumerationConstant

  context-free syntax

    %% 6.7.2.2
    "enum" ident:Identifier? "{" EnumeratorList "}"          -> EnumSpecifier {cons("EnumSpecifier")}
    "enum" ident:Identifier? "{" EnumeratorList "," "}"      -> EnumSpecifier {cons("EnumSpecifierTrComma")}
    "enum" Identifier                                        -> EnumSpecifier {cons("EnumIdentifier")}

    %% 6.7.2.2
    enud:{ EnumeratorDefinition "," }+                       -> EnumeratorList {cons("EnumeratorList")}

    %% 6.7.2.2
    EnumerationConstant                                -> EnumeratorDefinition {cons("EnumeratorConst")}
    EnumerationConstant "=" ConstantExpr         	   -> EnumeratorDefinition {cons("EnumeratorDef")}

    %% 6.4.4.3
    Identifier                                         -> EnumerationConstant

%%
%% EqualityExpressions.esdf:

module EqualityExpressions

imports

  RelationalExpressions

exports

  sorts
    EqualityExpr

  context-free syntax

    %% 6.5.9
    RelationalExpr                         	-> EqualityExpr
    EqualityExpr "==" RelationalExpr 		-> EqualityExpr {cons("Eq")}
    EqualityExpr "!=" RelationalExpr 		-> EqualityExpr {cons("NotEq")}
    
%%
%% EscapeSequences.esdf:

module EscapeSequences

imports

  Characters

exports

  sorts
    SIMPLE-ESCAPE-SEQUENCE
    OCTAL-ESCAPE-SEQUENCE
    OCTAL-ESCAPE-SEQUENCE1
    OCTAL-ESCAPE-SEQUENCE2
    OCTAL-ESCAPE-SEQUENCE3
    OCTAL-ESCAPE-SEQUENCE4
    HEXADECIMAL-ESCAPE-SEQUENCE
    HEX-QUAD

exports

  sorts
    ESCAPE-SEQUENCE
    UNIVERSAL-CHARACTER-NAME

  lexical syntax

    %% 6.4.4.4
    SIMPLE-ESCAPE-SEQUENCE      -> ESCAPE-SEQUENCE
    OCTAL-ESCAPE-SEQUENCE       -> ESCAPE-SEQUENCE
    HEXADECIMAL-ESCAPE-SEQUENCE -> ESCAPE-SEQUENCE
    UNIVERSAL-CHARACTER-NAME    -> ESCAPE-SEQUENCE

    %% 6.4.4.4
    "\\'"  -> SIMPLE-ESCAPE-SEQUENCE
    "\\\"" -> SIMPLE-ESCAPE-SEQUENCE
    "\\?"  -> SIMPLE-ESCAPE-SEQUENCE
    "\\\\" -> SIMPLE-ESCAPE-SEQUENCE
    "\\a"  -> SIMPLE-ESCAPE-SEQUENCE
    "\\b"  -> SIMPLE-ESCAPE-SEQUENCE
    "\\f"  -> SIMPLE-ESCAPE-SEQUENCE
    "\\n"  -> SIMPLE-ESCAPE-SEQUENCE
    "\\r"  -> SIMPLE-ESCAPE-SEQUENCE
    "\\t"  -> SIMPLE-ESCAPE-SEQUENCE
    "\\v"  -> SIMPLE-ESCAPE-SEQUENCE

    %% 6.4.4.4
    "\\" OCTAL-DIGIT                         	 -> OCTAL-ESCAPE-SEQUENCE1
    "\\" LOW-OCTAL-DIGIT OCTAL-DIGIT             -> OCTAL-ESCAPE-SEQUENCE2
    "\\" HIGH-OCTAL-DIGIT OCTAL-DIGIT            -> OCTAL-ESCAPE-SEQUENCE3
    "\\" LOW-OCTAL-DIGIT OCTAL-DIGIT OCTAL-DIGIT -> OCTAL-ESCAPE-SEQUENCE4

    OCTAL-ESCAPE-SEQUENCE1 -> OCTAL-ESCAPE-SEQUENCE
    OCTAL-ESCAPE-SEQUENCE2 -> OCTAL-ESCAPE-SEQUENCE
    OCTAL-ESCAPE-SEQUENCE3 -> OCTAL-ESCAPE-SEQUENCE
    OCTAL-ESCAPE-SEQUENCE4 -> OCTAL-ESCAPE-SEQUENCE

  lexical restrictions

    OCTAL-ESCAPE-SEQUENCE1 -/- [0-7]
    OCTAL-ESCAPE-SEQUENCE2 -/- [0-7]

  lexical syntax

    %% 6.4.4.4
    "\\x" HEXADECIMAL-DIGIT+ 	 -> HEXADECIMAL-ESCAPE-SEQUENCE

  lexical restrictions

    HEXADECIMAL-ESCAPE-SEQUENCE	 -/- [0-9a-fA-F]

  lexical syntax

    %% 6.4.3
    HEXADECIMAL-DIGIT HEXADECIMAL-DIGIT HEXADECIMAL-DIGIT HEXADECIMAL-DIGIT
                                 -> HEX-QUAD
    "\\u" HEX-QUAD               -> UNIVERSAL-CHARACTER-NAME
    "\\U" HEX-QUAD HEX-QUAD      -> UNIVERSAL-CHARACTER-NAME
%%
%% ExclusiveOrExpressions.esdf:

module ExclusiveOrExpressions

imports

  AndExpressions

exports

  sorts
     ExclusiveOrExpr

  context-free syntax

    %% 6.5.11
    AndExpr                           -> ExclusiveOrExpr
    ExclusiveOrExpr "^" AndExpr 	  -> ExclusiveOrExpr {cons("ExcOr")}
    
%%
%% Expressions.esdf:

module Expressions

imports

  AssignmentExpressions

exports

  sorts
     Expr

  context-free syntax

    %% 6.5.17
    ass:{ AssignmentExpr "," }+         -> Expr {cons("Expr")}
%%
%% ExpressionStatements.esdf:

module ExpressionStatements

imports

  Expressions

exports

  sorts
     ExprStm

  context-free syntax

    %% 6.8.3
    expr:Expr? ";" 		-> ExprStm {cons("ExprStm")}
    
%%
%% FloatLiterals.esdf:

module FloatLiterals

imports

  Characters

exports

  sorts
     FRACTIONAL-CONSTANT
     EXPONENT-PART
     SIGN
     FLOATING-SUFFIX
     DECIMAL-FLOATING-CONSTANT
     HEXADECIMAL-FLOATING-CONSTANT
     HEXADECIMAL-FRACTIONAL-CONSTANT
     BINARY-EXPONENT-PART

exports

  sorts
     FloatLiteral

  lexical syntax

    %% 6.4.4.2
    FRACTIONAL-CONSTANT EXPONENT-PART? FLOATING-SUFFIX? -> DECIMAL-FLOATING-CONSTANT
    DIGIT+ EXPONENT-PART FLOATING-SUFFIX?               -> DECIMAL-FLOATING-CONSTANT

    %% 6.4.4.2
    "0x" HEXADECIMAL-FRACTIONAL-CONSTANT
	BINARY-EXPONENT-PART FLOATING-SUFFIX?		-> HEXADECIMAL-FLOATING-CONSTANT
    "0x" HEXADECIMAL-DIGIT+
	BINARY-EXPONENT-PART FLOATING-SUFFIX?		-> HEXADECIMAL-FLOATING-CONSTANT
    "0X" HEXADECIMAL-FRACTIONAL-CONSTANT
	BINARY-EXPONENT-PART FLOATING-SUFFIX?		-> HEXADECIMAL-FLOATING-CONSTANT
    "0X" HEXADECIMAL-DIGIT+
	BINARY-EXPONENT-PART FLOATING-SUFFIX?		-> HEXADECIMAL-FLOATING-CONSTANT

    %% 6.4.4.2
    DIGIT* "." DIGIT+ 					-> FRACTIONAL-CONSTANT
    DIGIT+ "."        					-> FRACTIONAL-CONSTANT

    %% 6.4.4.2
    [eE] SIGN? DIGIT+ 					-> EXPONENT-PART

    %% 6.4.4.2
    [\+\-] 						-> SIGN

    %% 6.4.4.2
    HEXADECIMAL-DIGIT* "." HEXADECIMAL-DIGIT+		-> HEXADECIMAL-FRACTIONAL-CONSTANT
    HEXADECIMAL-DIGIT+ "."							-> HEXADECIMAL-FRACTIONAL-CONSTANT

    %% 6.4.4.2
    "p" SIGN? DIGIT+ 					-> BINARY-EXPONENT-PART
    "P" SIGN? DIGIT+ 					-> BINARY-EXPONENT-PART

    %% 6.4.4.2
    [flFL] 						-> FLOATING-SUFFIX

  context-free syntax

    DECIMAL-FLOATING-CONSTANT 				-> FloatLiteral
    HEXADECIMAL-FLOATING-CONSTANT 			-> FloatLiteral
%%
%% FunctionDefinitions.esdf:

module FunctionDefinitions

imports

   CompoundStatements
   Declarators
   Specifiers

exports

  sorts
    DeclarationList

exports

  sorts
    FunctionDefinition

  context-free syntax

    %% 6.9.1
    DeclarationSpecifierSeq Declarator dl:DeclarationList? CompoundStm
                                               -> FunctionDefinition {cons("FunDef")}
    %% 6.9.1
    Declaration+                               -> DeclarationList {cons("DecSeq")}
%%
%% FunctionSpecifiers.esdf:

module FunctionSpecifiers

exports

  sorts
    FunctionSpecifier

  context-free syntax

    %% 6.7.4
    "inline"   -> FunctionSpecifier {cons("Inline")}
%%
%% Identifiers.esdf:

module Identifiers

imports

  Characters
  Keywords
  Layout

exports

  sorts
    ID

exports

  sorts
    Identifier

  lexical syntax

    %% 6.4.2.1
    NON-DIGIT(NON-DIGIT|DIGIT)* -> ID

  lexical restrictions
    ID -/- [a-zA-Z0-9\_]

  context-free syntax

    %% 6.4.2.1
    ID                         -> Identifier {cons("Id")}

%%
%% OrExpressions.esdf:

module OrExpressions

imports

  ExclusiveOrExpressions

exports

  sorts
    OrExpr

  context-free syntax

    %% 6.5.12
    ExclusiveOrExpr         	-> OrExpr
    OrExpr "|" ExclusiveOrExpr 	-> OrExpr {cons("Or")}
    
%%
%% InitDeclarators.esdf:

module InitDeclarators

imports

  Declarators

exports

  sorts
    InitDeclarator
    InitDeclaratorList

  context-free syntax

    %% 6.7
    initd:{ InitDeclarator "," }+     -> InitDeclaratorList {cons("InitDeclaratorList")}

    %% 6.7
    Declarator                        -> InitDeclarator
    Declarator "=" Initializer        -> InitDeclarator {cons("InitDeclarator")}

%%
%% Initializers.esdf:

module Initializers

imports

  AssignmentExpressions
  Designations

exports
  sorts
    InitializerSeq

exports

  sorts

    Initializer
    InitializerList

  context-free syntax

    %% 6.7.8
    AssignmentExpr                          -> Initializer
    
    "{" InitializerList     "}"             -> Initializer {cons("Initializer")}
    "{" InitializerList "," "}"             -> Initializer {cons("InitializerTrComma")}

    %% 6.7.8
    Designation? Initializer                -> InitializerSeq {cons("InitializerSeq")}
    { InitializerSeq "," }+                 -> InitializerList {cons("InitializerList")}
    
%%
%% IntLiterals.esdf:

module IntLiterals

imports

  Characters

exports

  sorts
    INTEGER-LITERAL
    DECIMAL-LITERAL
    OCTAL-LITERAL
    HEXADECIMAL-LITERAL
    INTEGER-SUFFIX
    UNSIGNED-SUFFIX
    LONG-SUFFIX
    LONG-LONG-SUFFIX

exports

  sorts
    IntLiteral

  lexical syntax

    %% 2.13.1 [lex.icon]
    DECIMAL-LITERAL INTEGER-SUFFIX?     -> INTEGER-LITERAL
    OCTAL-LITERAL INTEGER-SUFFIX?       -> INTEGER-LITERAL
    HEXADECIMAL-LITERAL INTEGER-SUFFIX? -> INTEGER-LITERAL

    %% 2.13.1 [lex.icon]
    NONZERO-DIGIT DIGIT* -> DECIMAL-LITERAL

    %% 2.13.1 [lex.icon]
    "0" OCTAL-DIGIT* -> OCTAL-LITERAL

    %% 2.13.1 [lex.icon]
    "0x" HEXADECIMAL-DIGIT* -> HEXADECIMAL-LITERAL
    "0X" HEXADECIMAL-DIGIT* -> HEXADECIMAL-LITERAL

    %% 2.13.1 [lex.icon]
    UNSIGNED-SUFFIX LONG-SUFFIX?         -> INTEGER-SUFFIX {prefer}
    UNSIGNED-SUFFIX LONG-LONG-SUFFIX?    -> INTEGER-SUFFIX
    LONG-SUFFIX UNSIGNED-SUFFIX?         -> INTEGER-SUFFIX
    LONG-LONG-SUFFIX UNSIGNED-SUFFIX?    -> INTEGER-SUFFIX

    %% 2.13.1 [lex.icon]
    [uU]                  -> UNSIGNED-SUFFIX
    [lL]                  -> LONG-SUFFIX
    [l][l]                -> LONG-LONG-SUFFIX
    [L][L]                -> LONG-LONG-SUFFIX

  context-free syntax

    INTEGER-LITERAL -> IntLiteral

  lexical restrictions

    INTEGER-LITERAL -/- [\.]
%%
%% IterationStatements.esdf:

module IterationStatements

imports

  Statements
  SelectionStatements
  ExpressionStatements
  Declarations

exports

  sorts
    IterationStm

  context-free syntax

    %% 6.8.5
    "while" "(" Expr ")" Stm                -> IterationStm {cons("While")}
    "do" Stm "while" "(" Expr ")" ";"       -> IterationStm {cons("Do")}
    
    "for" "(" exp1:Expr? ";" exp2:Expr? ";" exp3:Expr? ")" Stm 		-> IterationStm {cons("For")}
    "for" "(" Declaration exp1:Expr? ";" exp2:Expr? ")" Stm			-> IterationStm {cons("ForDec")}
                                                        
%%
%% JumpStatements.esdf:

module JumpStatements

imports

  Expressions
  Identifiers

exports

  sorts
    JumpStm

  context-free syntax

    %% 6.8.6
    "break" ";"                    -> JumpStm {cons("Break")}
    "continue" ";"                 -> JumpStm {cons("Continue")}
    "return" exp1:Expr? ";"        -> JumpStm {cons("Return")}
    "goto" Identifier ";"          -> JumpStm {cons("Goto")}
    
%%
%% Keywords.esdf:

module Keywords

imports

  Layout
  Identifiers

exports

  context-free syntax

    %% 6.4.1
    "auto"             -> Identifier { reject }
    "break"            -> Identifier { reject }
    "case"             -> Identifier { reject }
    "char"             -> Identifier { reject }
    "const"            -> Identifier { reject }
    "continue"         -> Identifier { reject }
    "default"          -> Identifier { reject }
    "do"               -> Identifier { reject }
    "double"           -> Identifier { reject }
    "else"             -> Identifier { reject }
    "enum"             -> Identifier { reject }
    "extern"           -> Identifier { reject }
    "float"            -> Identifier { reject }
    "for"              -> Identifier { reject }
    "goto"             -> Identifier { reject }
    "if"               -> Identifier { reject }
    "inline"           -> Identifier { reject }
    "int"              -> Identifier { reject }
    "long"             -> Identifier { reject }
    "register"         -> Identifier { reject }
    "restrict"         -> Identifier { reject }
    "return"           -> Identifier { reject }
    "short"            -> Identifier { reject }
    "signed"           -> Identifier { reject }
    "sizeof"           -> Identifier { reject }
    "static"           -> Identifier { reject }
    "struct"           -> Identifier { reject }
    "switch"           -> Identifier { reject }
    "typedef"          -> Identifier { reject }
    "union"            -> Identifier { reject }
    "unsigned"         -> Identifier { reject }
    "void"             -> Identifier { reject }
    "volatile"         -> Identifier { reject }
    "while"            -> Identifier { reject }
    "_Bool"            -> Identifier { reject }
    "_Complex"         -> Identifier { reject }
    "_Imaginary"       -> Identifier { reject }

  lexical restrictions
    "auto"                -/- [a-zA-Z0-9\_]
    "break"               -/- [a-zA-Z0-9\_]
    "case"                -/- [a-zA-Z0-9\_]
    "char"                -/- [a-zA-Z0-9\_]
    "const"               -/- [a-zA-Z0-9\_]
    "continue"            -/- [a-zA-Z0-9\_]
    "default"             -/- [a-zA-Z0-9\_]
    "do"                  -/- [a-zA-Z0-9\_]
    "double"              -/- [a-zA-Z0-9\_]
    "else"                -/- [a-zA-Z0-9\_]
    "enum"                -/- [a-zA-Z0-9\_]
    "extern"              -/- [a-zA-Z0-9\_]
    "float"               -/- [a-zA-Z0-9\_]
    "for"                 -/- [a-zA-Z0-9\_]
    "goto"                -/- [a-zA-Z0-9\_]
    "if"                  -/- [a-zA-Z0-9\_]
    "inline"              -/- [a-zA-Z0-9\_]
    "int"                 -/- [a-zA-Z0-9\_]
    "long"                -/- [a-zA-Z0-9\_]
    "register"            -/- [a-zA-Z0-9\_]
    "restrict"            -/- [a-zA-Z0-9\_]
    "return"              -/- [a-zA-Z0-9\_]
    "short"               -/- [a-zA-Z0-9\_]
    "signed"              -/- [a-zA-Z0-9\_]
    "sizeof"              -/- [a-zA-Z0-9\_]
    "static"              -/- [a-zA-Z0-9\_]
    "struct"              -/- [a-zA-Z0-9\_]
    "switch"              -/- [a-zA-Z0-9\_]
    "typedef"             -/- [a-zA-Z0-9\_]
    "union"               -/- [a-zA-Z0-9\_]
    "unsigned"            -/- [a-zA-Z0-9\_]
    "void"                -/- [a-zA-Z0-9\_]
    "volatile"            -/- [a-zA-Z0-9\_]
    "while"               -/- [a-zA-Z0-9\_]
    "_Bool"               -/- [a-zA-Z0-9\_]
    "_Complex"            -/- [a-zA-Z0-9\_]
    "_Imaginary"          -/- [a-zA-Z0-9\_]
%%
%% LabeledStatements.esdf:

module LabeledStatements

imports

  Identifiers
  Statements
  ConstantExpressions

exports

  sorts
    LabeledStm

  context-free syntax

    %% 6.8.1
    Identifier ":" Stm              -> LabeledStm {cons("Label")}
    "case" ConstantExpr ":" Stm 	-> LabeledStm {cons("Case")}
    "default" ":" Stm               -> LabeledStm {cons("Default")}
    
%%
%% Layout.esdf:

module Layout

exports

   sorts
    ASTERISK

exports

  lexical syntax

    [\*] -> ASTERISK

    [\ \t\r\n\11\12]              -> LAYOUT
    "//" ~[\n\r]* [\n\r]          -> LAYOUT
    "/*" (~[\*]|ASTERISK)* "*/"   -> LAYOUT

  lexical restrictions

    ASTERISK -/- [\/]

  context-free restrictions

    LAYOUT? -/- [\ \t\r\n\11\12] | [\/].[\/\*]
%%
%% Literals.esdf:

module Literals

imports

  CharLiterals
  EnumSpecifiers
  FloatLiterals
  IntLiterals
  Layout
  StringLiterals

exports

  sorts
    Literal

  context-free syntax

    %% 6.4.4
    IntLiteral      -> Literal {cons("IntLit")}
    CharLiteral     -> Literal {cons("CharLit")}
    FloatLiteral    -> Literal {cons("FloatLit")}

    %% seba: EnumerationConstant is not an expression literal
    %% EnumerationConstant      -> Literal {cons("EnumLit")}

%%
%% LogicalAndExpressions.esdf:

module LogicalAndExpressions

imports

  OrExpressions

exports

  sorts
    LogicalAndExpr

  context-free syntax

    %% 6.5.13
    OrExpr                     	-> LogicalAndExpr
    LogicalAndExpr "&&" OrExpr 	-> LogicalAndExpr {cons("LogicalAnd")}
    
%%
%% LogicalOrExpressions.esdf:

module LogicalOrExpressions

imports

  LogicalAndExpressions

exports

  sorts
    LogicalOrExpr 

  context-free syntax

    %% 6.5.14
    LogicalAndExpr                     	-> LogicalOrExpr
    LogicalOrExpr "||" LogicalAndExpr 	-> LogicalOrExpr {cons("LogicalOr")}
    
%%
%% MultiplicativeExpressions.esdf:

module MultiplicativeExpressions

imports

  CastExpressions

exports

  sorts
    MultiplicativeExpr

  context-free syntax

    %% 6.5.5
    CastExpr        -> MultiplicativeExpr

    MultiplicativeExpr "*" CastExpr 	-> MultiplicativeExpr {cons("Mul") }
    MultiplicativeExpr "/" CastExpr 	-> MultiplicativeExpr {cons("Div")}
    MultiplicativeExpr "%" CastExpr 	-> MultiplicativeExpr {cons("Mod")}
    
%%
%% ParameterDeclarations.esdf:

module ParameterDeclarations

imports

  AssignmentExpressions
  Declarators
  Specifiers
  TypeIds

exports
  sorts
    ParameterList
    ParameterDeclaration

exports

  sorts

    ParameterTypeList

  context-free syntax

    %% 6.7.5
    ParameterList                              -> ParameterTypeList
    ParameterList "," "..."                    -> ParameterTypeList {cons("VarArgs")}

    %% 6.7.5
    pd:{ ParameterDeclaration "," }+           -> ParameterList {cons("ParamList")}

    %% 6.7.5
    DeclarationSpecifierSeq Declarator         		-> ParameterDeclaration {cons("ParamDec")}
    DeclarationSpecifierSeq ad:AbstractDeclarator?	-> ParameterDeclaration {cons("ParamDecAbstr"), avoid}

%%
%% PostfixExpressions.esdf:

module PostfixExpressions

imports

  AssignmentExpressions
  Expressions
  Initializers
  PrimaryExpressions
  TypeIds

exports

  sorts
    PostfixExpr

  context-free syntax

    %% 6.5.2
    PrimaryExpr                                     -> PostfixExpr {cons("PrimaryExpr")}
    PostfixExpr "[" Expr "]"                  		-> PostfixExpr {cons("ArraySubscript")}
    PostfixExpr "(" expr:Expr? ")"            		-> PostfixExpr {cons("Call")}
    PostfixExpr "." Identifier                      -> PostfixExpr {cons("MemberAccess")}
    PostfixExpr "->" Identifier                     -> PostfixExpr {cons("PMemberAccess")}
    PostfixExpr "++"                                -> PostfixExpr {cons("PostIncr")}
    PostfixExpr "--"                                -> PostfixExpr {cons("PostDecr")}
    "(" TypeName ")" "{" InitializerList "}"        -> PostfixExpr {cons("PostfixExpr")}
    "(" TypeName ")" "{" InitializerList "," "}"    -> PostfixExpr {cons("PostfixExprTrComma")}

%%
%% PrimaryExpressions.esdf:

module PrimaryExpressions

imports

  Expressions
  Literals

exports

  sorts
    PrimaryExpr

  context-free syntax

    %% 6.5.1
    Identifier         -> PrimaryExpr
    Literal            -> PrimaryExpr {cons("Lit")}
    StringLiteral+     -> PrimaryExpr {cons("StringLitSeq")}
    "(" Expr ")" 	   -> PrimaryExpr {cons("ParenExpr")}
    
%%
%% RelationalExpressions.esdf:

module RelationalExpressions

imports

  ShiftExpressions

exports

  sorts
    RelationalExpr

  context-free syntax

    %% 6.5.8
    ShiftExpr 	-> RelationalExpr

    RelationalExpr "<" ShiftExpr  -> RelationalExpr {cons("Lt")}
    RelationalExpr ">" ShiftExpr  -> RelationalExpr {cons("Gt")}
    RelationalExpr "<=" ShiftExpr -> RelationalExpr {cons("LtEq")}
    RelationalExpr ">=" ShiftExpr -> RelationalExpr {cons("GtEq")}
    
%%
%% SelectionStatements.esdf:

module SelectionStatements

imports

  AssignmentExpressions
  Expressions
  Statements

exports

  sorts
    SelectionStm

  context-free syntax

    %% 6.8.4
    "if" "(" Expr ")" Stm                  		-> SelectionStm {cons("If"), prefer}
    "if" "(" Expr ")" st1:Stm "else" st2:Stm	-> SelectionStm {cons("If")}
    "switch" "(" Expr ")" Stm              		-> SelectionStm {cons("Switch")}
    
%%
%% ShiftExpressions.esdf:

module ShiftExpressions

imports

  AdditiveExpressions

exports

  sorts
    ShiftExpr

  context-free syntax

   %% 6.5.7
   AdditiveExpr         -> ShiftExpr

   ShiftExpr "<<" AdditiveExpr 	-> ShiftExpr {cons("LeftShift")}
   ShiftExpr ">>" AdditiveExpr 	-> ShiftExpr {cons("RightShift")}
   
%%
%% SpecifierQualifiers.esdf:

module SpecifierQualifiers

imports

  TypeQualifiers
  TypeSpecifiers

exports
  sorts
    SpecifierQualifier

exports

  sorts
    SpecifierQualifierList

  context-free syntax

    %%
    %% FIXME: Factor with Specifiers.esdf
    %%

    %% 6.7.2.1
    TypeSpecifier                          -> SpecifierQualifier {cons("TypeSpecifier")}
    TypeQualifier                          -> SpecifierQualifier {cons("TypeQualifier")}
    sq:SpecifierQualifier+                 -> SpecifierQualifierList {cons("SpecifierQualifierList")}

%%
%% Specifiers.esdf:

module Specifiers

imports

  FunctionSpecifiers
  StorageClassSpecifiers
  TypeSpecifiers
  TypeQualifiers

exports

  sorts
    DeclarationSpecifier
    DeclarationSpecifierSeq

  context-free syntax

    %% 6.7
    StorageClassSpecifier -> DeclarationSpecifier {cons("StorageClassSpecifier")}
    TypeSpecifier         -> DeclarationSpecifier {cons("TypeSpecifier")}
    TypeQualifier         -> DeclarationSpecifier {cons("TypeQualifier")}
    FunctionSpecifier     -> DeclarationSpecifier {cons("FunSpecifier")}

    %% 6.7
    decls:DeclarationSpecifier+ -> DeclarationSpecifierSeq {cons("DecSpecifierSeq")}
    
%%
%% Statements.esdf:

module Statements

imports

  CompoundStatements
  ExpressionStatements
  IterationStatements
  JumpStatements
  LabeledStatements
  SelectionStatements

exports

  sorts
    Stm

  context-free syntax

    %% 6.8
    LabeledStm     -> Stm {cons("LabeledStm")}
    CompoundStm    -> Stm

    ExprStm  -> Stm
    SelectionStm   -> Stm {cons("SelectionStm")}
    IterationStm   -> Stm {cons("IterationStm")}
    JumpStm        -> Stm {cons("JumpStm")}
    
%%
%% StorageClassSpecifiers.esdf:

module StorageClassSpecifiers

imports

exports

  sorts
    StorageClassSpecifier

  context-free syntax

    %% 6.7.1
    "typedef"  -> StorageClassSpecifier {cons("Typedef")}
    "auto"     -> StorageClassSpecifier {cons("Auto")}
    "register" -> StorageClassSpecifier {cons("Register")}
    "static"   -> StorageClassSpecifier {cons("Static")}
    "extern"   -> StorageClassSpecifier {cons("Extern")}
    
%%
%% StringLiterals.esdf:

module StringLiterals

imports

  Characters
  EscapeSequences

exports

  sorts
    STRING-LITERAL
    S-CHAR
    S-CHAR-SEQUENCE

exports

  sorts
    StringLiteral

  lexical syntax

    %% 2.13.4 [lex.string]
    "\"" S-CHAR-SEQUENCE? "\""  -> STRING-LITERAL
    "L\"" S-CHAR-SEQUENCE? "\"" -> STRING-LITERAL

    %% 2.13.4 [lex.string]
    S-CHAR+ -> S-CHAR-SEQUENCE

    %% 2.13.4 [lex.string]
    S-SOURCE-CHARACTER       -> S-CHAR
    ESCAPE-SEQUENCE          -> S-CHAR
    UNIVERSAL-CHARACTER-NAME -> S-CHAR

  context-free syntax

    STRING-LITERAL -> StringLiteral
%%
%% StructOrUnionSpecifiers.esdf:

module StructOrUnionSpecifiers

imports

  AssignmentExpressions
  ConstantExpressions
  Declarators
  Identifiers
  SpecifierQualifiers

exports

  sorts
    StructDeclaration
    StructDeclarator
    StructDeclaratorList
    StructDeclarationList
    StructOrUnion

exports

  sorts
    StructOrUnionSpecifier

  context-free syntax

    %% 6.7.2.1
    StructOrUnion ident:Identifier? "{" StructDeclarationList "}"
                                -> StructOrUnionSpecifier {cons("StructOrUnionDec")}
    StructOrUnion Identifier    -> StructOrUnionSpecifier {cons("StructOrUnionSpecifier")}

    %% 6.7.2.1
    "struct"           -> StructOrUnion {cons("Struct")}
    "union"            -> StructOrUnion {cons("Union")}


    %% 6.7.2.1
    st:StructDeclaration+     -> StructDeclarationList {cons("StructDecList")}

    %% 6.7.2.1
    SpecifierQualifierList StructDeclaratorList ";" -> StructDeclaration {cons("StructDec")}

    %% 6.7.2.1
    st:{ StructDeclarator "," }+         	  -> StructDeclaratorList {cons("StructDeclList")}

    %% 6.7.2.1
    Declarator                                -> StructDeclarator 
    dl:Declarator? ":" ConstantExpr           -> StructDeclarator {cons("StructDeclarator")}


%%
%% TranslationUnits.esdf:

module TranslationUnits

imports

  Declarations
  Includes

exports
	
  sorts
    ExternalDeclarationSeq

exports

  sorts

    TranslationUnit
    ExternalDeclaration

  context-free syntax

    %% 6.9
    ExternalDeclarationSeq?            -> TranslationUnit {cons("TranslationUnit")}

    %% 6.9 (added)
    ed:ExternalDeclaration+            -> ExternalDeclarationSeq {cons("ExtDecSeq")}

    %% 6.9
    FunctionDefinition                 -> ExternalDeclaration
    Declaration                        -> ExternalDeclaration {cons("ExtDec")}
    
    %% (added) support #include directives
    Include							   -> ExternalDeclaration
    
  context-free start-symbols
  	ExternalDeclarationSeq  
    
%%
%% TypeIds.esdf:

module TypeIds

imports

  AssignmentExpressions
  ParameterDeclarations
  TypeQualifiers
  TypeSpecifiers

exports

  sorts
    TypeName
    AbstractDeclarator
    DirectAbstractDeclarator

  context-free syntax

    %% 6.7.6
    SpecifierQualifierList ad:AbstractDeclarator?   -> TypeName {cons("TypeName")}

    %% 6.7.6
    PointerSeq                                      -> AbstractDeclarator
    pt:PointerSeq? DirectAbstractDeclarator         -> AbstractDeclarator {cons("AbstrDeclPointer")}

    %% 6.7.6
    "(" AbstractDeclarator ")"                      -> DirectAbstractDeclarator {cons("AbstrDeclPar")}
    dad:DirectAbstractDeclarator? "[" ae:AssignmentExpr? "]"
                                                    -> DirectAbstractDeclarator {cons("AbstrDeclAssign")}
    dad:DirectAbstractDeclarator? "[" "*" "]"       -> DirectAbstractDeclarator {cons("AbstrDeclDeref")}
    dad:DirectAbstractDeclarator? "(" ptl:ParameterTypeList? ")"
                                                    -> DirectAbstractDeclarator {cons("AbstrDeclParamTypes")}

  lexical restrictions
    "+" -/- [\+]
    "-" -/- [\-]
    
%%
%% TypeQualifiers.esdf:

module TypeQualifiers

exports

  sorts
    TypeQualifier
    TypeQualifierList

  context-free syntax

    %% 6.7.3
    "const"            -> TypeQualifier {cons("Const")}
    "restrict"         -> TypeQualifier {cons("Restrict")}
    "volatile"         -> TypeQualifier {cons("Volatile")}

    %% 6.7.5
    TypeQualifier+     -> TypeQualifierList {cons("TypeQualifierList")}
    
%%
%% TypeSpecifiers.esdf:

module TypeSpecifiers

imports

  EnumSpecifiers
  Identifiers
  StructOrUnionSpecifiers
  TypeQualifiers

exports
  sorts
    TypedefName

exports

  sorts
    TypeSpecifier

  context-free syntax

    %% 6.7.2
    "void"                  -> TypeSpecifier {cons("Void")}
    "char"                  -> TypeSpecifier {cons("Char")}
    "short"                 -> TypeSpecifier {cons("Short")}
    "int"                   -> TypeSpecifier {cons("Int")}
    "long"                  -> TypeSpecifier {cons("Long")}
    "float"                 -> TypeSpecifier {cons("Float")}
    "double"                -> TypeSpecifier {cons("Double")}
    "signed"                -> TypeSpecifier {cons("Signed")}
    "unsigned"              -> TypeSpecifier {cons("Unsigned")}
    "_Bool"                 -> TypeSpecifier {cons("Bool")}
    "_Complex"              -> TypeSpecifier {cons("Complex")}
    "_Imaginary"            -> TypeSpecifier {cons("Imaginary")}
    StructOrUnionSpecifier  -> TypeSpecifier {cons("StructOrUnion")}
    EnumSpecifier           -> TypeSpecifier {cons("Enum")}
    TypedefName             -> TypeSpecifier {cons("TypedefName")}

    %% 6.7.7
    Identifier              -> TypedefName 
    
%%
%% UnaryExpressions.esdf:

module UnaryExpressions

imports

  CastExpressions
  PostfixExpressions
  TypeIds

exports

  sorts
    UnaryOperator

exports

  sorts
    UnaryExpr

  context-free syntax

    %% 6.5.3
    PostfixExpr            -> UnaryExpr

    "++" UnaryExpr         		-> UnaryExpr {cons("PreIncr")}
    "--" UnaryExpr         		-> UnaryExpr {cons("PreDecr")}
    UnaryOperator CastExpr 		-> UnaryExpr {cons("CastExpr")}
    "sizeof" UnaryExpr     		-> UnaryExpr {cons("SizeOf")}
    "sizeof" "(" TypeName ")"   -> UnaryExpr {cons("SizeOfType")}

    %% 6.5.3
    "*" -> UnaryOperator        {cons("Deref")}
    "&" -> UnaryOperator        {cons("Ref")}
    "+" -> UnaryOperator        {cons("Plus")}
    "-" -> UnaryOperator        {cons("Minus")}
    "!" -> UnaryOperator        {cons("Not")}
    "~" -> UnaryOperator        {cons("Complement")}

    
%%
%% Support #include directives
module Includes

imports
	StringLiterals
  
exports

  sorts
    IncludeFile

  lexical syntax

    S-CHAR-SEQUENCE?  -> IncludeFile

exports
	sorts
		Include
		
	context-free syntax
		"#" "include" "<" IncludeFile ">"		-> Include {cons("StdInclude")}
		"#" "include" "\"" IncludeFile "\"" 	-> Include {cons("Include")}
		
		   

module C

imports
	AdditiveExpressions
	AndExpressions
	AssignmentExpressions
	MainC
	CastExpressions
	CharLiterals
	Characters
	CompoundStatements
	CondExpressions
	ConstantExpressions
	Declarations
	Declarators
	Designations
	EnumSpecifiers
	EqualityExpressions
	EscapeSequences
	ExclusiveOrExpressions
	Expressions
	ExpressionStatements
	FloatLiterals
	FunctionDefinitions
	FunctionSpecifiers
	Identifiers
	OrExpressions
	InitDeclarators
	Initializers
	IntLiterals
	IterationStatements
	JumpStatements
	Keywords
	LabeledStatements
	Layout
	Literals
	LogicalAndExpressions
	LogicalOrExpressions
	MultiplicativeExpressions
	ParameterDeclarations
	PostfixExpressions
	PrimaryExpressions
	RelationalExpressions
	SelectionStatements
	ShiftExpressions
	SpecifierQualifiers
	Specifiers
	Statements
	StorageClassSpecifiers
	StringLiterals
	StructOrUnionSpecifiers
	TranslationUnits
	TypeIds
	TypeQualifiers
	TypeSpecifiers
	UnaryExpressions
	
	Includes

exports
	context-free start-symbols
		TranslationUnit
		ExternalDeclarationSeq
    

module org/sugarj/languages/C
imports C [
	AdditiveExpr 				=> CAdditiveExpr
	AndExpr 					=> CAndExpr
	AssignmentExpr				=> CAssignmentExpr
	AssignmentOperator 			=> CAssignmentOperator
	CastExpr					=> CCastExpr
	CharLiteral					=> CCharLiteral
	CompoundStm					=> CCompoundStm
	BlockItemList				=> CBlockItemList
	BlockItem					=> CBlockItem
	CondExpr					=> CCondExpr
	ConstantExpr				=> CConstantExpr
	Declaration					=> CDeclaration
	Declarator					=> CDeclarator
	DirectDeclarator			=> CDirectDeclarator
	PointerSeq					=> CPointerSeq
	Pointer						=> CPointer
	IdentifierList				=> CIdentifierList
	Designation					=> CDesignation
	DesignatorList				=> CDesignatorList
	Designator					=> CDesignator
	EnumSpecifier				=> CEnumSpecifier
	EnumeratorList				=> CEnumeratorList
	EnumeratorDefinition		=> CEnumeratorDefinition
	EnumerationConstant			=> CEnumerationConstant
	EqualityExpr				=> CEqualityExpr
	ExclusiveOrExpr				=> CExclusiveOrExpr
	Expr						=> CExpr
	ExprStm						=> CExprStm
	FloatLiteral				=> CFloatLiteral
	FunctionDefinition			=> CFunctionDefinition
	DeclarationList				=> CDeclarationList
	FunctionSpecifier			=> CFunctionSpecifier
	Identifier					=> CIdentifier
	OrExpr						=> COrExpr
	InitDeclaratorList			=> CInitDeclaratorList
	InitDeclarator				=> CInitDeclarator
	Initializer					=> CInitializer
	InitializerSeq				=> CInitializerSeq
	InitializerList				=> CInitializerList
	IterationStm				=> CIterationStm
	JumpStm						=> CJumpStm
	LabeledStm					=> CLabeledStm
	Literal						=> CLiteral
	LogicalAndExpr				=> CLogicalAndExpr
	LogicalOrExpr				=> CLogicalOrExpr
	MultiplicativeExpr			=> CMultiplicativeExpr
	ParameterTypeList			=> CParameterTypeList
	ParameterList				=> CParameterList
	ParameterDeclaration		=> CParameterDeclaration
	PostfixExpr					=> CPostfixExpr
	PrimaryExpr					=> CPrimaryExpr
	RelationalExpr				=> CRelationalExpr
	SelectionStm				=> CSelectionStm
	ShiftExpr					=> CShiftExpr
	SpecifierQualifier			=> CSpecifierQualifier
	SpecifierQualifierList		=> CSpecifierQualifierList
	DeclarationSpecifier		=> CDeclarationSpecifier
	DeclarationSpecifierSeq		=> CDeclarationSpecifierSeq
	Stm							=> CStm
	StorageClassSpecifier		=> CStorageClassSpecifier
	StringLiteral				=> CStringLiteral
	StructOrUnionSpecifier		=> CStructOrUnionSpecifier
	StructOrUnion				=> CStructOrUnion
	StructDeclarationList		=> CStructDeclarationList
	StructDeclaration			=> CStructDeclaration
	StructDeclaratorList		=> CStructDeclaratorList
	StructDeclarator			=> CStructDeclarator
	TranslationUnit				=> CTranslationUnit
	ExternalDeclarationSeq		=> CExternalDeclarationSeq
	ExternalDeclaration			=> CExternalDeclaration
	TypeName					=> CTypeName
	AbstractDeclarator			=> CAbstractDeclarator
	DirectAbstractDeclarator	=> CDirectAbstractDeclarator
	TypeQualifier				=> CTypeQualifier
	TypeQualifierList			=> CTypeQualifierList
	TypeSpecifier				=> CTypeSpecifier
	TypedefName					=> CTypedefName
	UnaryExpr					=> CUnaryExpr
	UnaryOperator				=> CUnaryOperator
	Include						=> CInclude
]