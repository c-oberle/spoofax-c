PP-Table([PP-Entry(Path1("Plus"),[Arg("1"),FBOX(KW,S("\"+\"")),Arg("2")]),PP-Entry(Path1("Minus"),[Arg("1"),FBOX(KW,S("\"-\"")),Arg("2")]),PP-Entry(Path1("And"),[Arg("1"),FBOX(KW,S("\"&\"")),Arg("2")]),PP-Entry(Path1("Assign"),[Arg("1"),Arg("2"),Arg("3")]),PP-Entry(Path1("AssignOp"),[FBOX(KW,S("\"=\""))]),PP-Entry(Path1("AssignOpMul"),[FBOX(KW,S("\"*=\""))]),PP-Entry(Path1("AssignOpDiv"),[FBOX(KW,S("\"/=\""))]),PP-Entry(Path1("AssignOpMod"),[FBOX(KW,S("\"%=\""))]),PP-Entry(Path1("AssignOpPlus"),[FBOX(KW,S("\"+=\""))]),PP-Entry(Path1("AssignOpMinus"),[FBOX(KW,S("\"-=\""))]),PP-Entry(Path1("AssignOpShiftR"),[FBOX(KW,S("\">>=\""))]),PP-Entry(Path1("AssignOpShiftL"),[FBOX(KW,S("\"<<=\""))]),PP-Entry(Path1("AssignOpAnd"),[FBOX(KW,S("\"&=\""))]),PP-Entry(Path1("AssignOpXor"),[FBOX(KW,S("\"^=\""))]),PP-Entry(Path1("AssignOpOr"),[FBOX(KW,S("\"|=\""))]),PP-Entry(Path1("Cast"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\"")),Arg("2")]),PP-Entry(Path1("Block"),[FBOX(KW,S("\"{\"")),Arg("1"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("Block",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("BlockItems"),[Arg("1")]),PP-Entry(Path("BlockItems",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("Cond"),[Arg("1"),FBOX(KW,S("\"?\"")),Arg("2"),FBOX(KW,S("\":\"")),Arg("3")]),PP-Entry(Path1("ConstExpr"),[Arg("1")]),PP-Entry(Path1("Dec"),[Arg("1"),Arg("2"),FBOX(KW,S("\";\""))]),PP-Entry(Path("Dec",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path1("Declarator"),[Arg("1"),Arg("2")]),PP-Entry(Path("Declarator",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("DeclPar"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("DeclQualifierAssign"),[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),Arg("3"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("DeclQualifierAssign",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path("DeclQualifierAssign",[selector("3","opt")]),[Arg("1")]),PP-Entry(Path1("DeclStaticAssign"),[Arg("1"),FBOX(KW,S("\"[\"")),FBOX(KW,S("\"static\"")),Arg("2"),Arg("3"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("DeclStaticAssign",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path1("DeclQualifierStaticAssign"),[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"static\"")),Arg("3"),FBOX(KW,S("\"]\""))]),PP-Entry(Path1("DeclTypeQualifiers"),[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"*\"")),FBOX(KW,S("\"]\""))]),PP-Entry(Path("DeclTypeQualifiers",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path1("DeclParams"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("DeclIds"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("DeclIds",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path1("PointerSeq"),[Arg("1")]),PP-Entry(Path("PointerSeq",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("Pointer"),[FBOX(KW,S("\"*\"")),Arg("1")]),PP-Entry(Path("Pointer",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("IdentifierList"),[Arg("1")]),PP-Entry(Path("IdentifierList",[selector("1","iter-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Designation"),[Arg("1"),FBOX(KW,S("\"=\""))]),PP-Entry(Path1("DesignatorList"),[Arg("1")]),PP-Entry(Path("DesignatorList",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("BracketDesignator"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"]\""))]),PP-Entry(Path1("DotDesignator"),[FBOX(KW,S("\".\"")),Arg("1")]),PP-Entry(Path1("EnumSpecifier"),[FBOX(KW,S("\"enum\"")),Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("EnumSpecifier",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("EnumSpecifierTrComma"),[FBOX(KW,S("\"enum\"")),Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\",\"")),FBOX(KW,S("\"}\""))]),PP-Entry(Path("EnumSpecifierTrComma",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("EnumIdentifier"),[FBOX(KW,S("\"enum\"")),Arg("1")]),PP-Entry(Path1("EnumeratorList"),[Arg("1")]),PP-Entry(Path("EnumeratorList",[selector("1","iter-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("EnumeratorConst"),[Arg("1")]),PP-Entry(Path1("EnumeratorDef"),[Arg("1"),FBOX(KW,S("\"=\"")),Arg("2")]),PP-Entry(Path1("Eq"),[Arg("1"),FBOX(KW,S("\"==\"")),Arg("2")]),PP-Entry(Path1("NotEq"),[Arg("1"),FBOX(KW,S("\"!=\"")),Arg("2")]),PP-Entry(Path1("ExcOr"),[Arg("1"),FBOX(KW,S("\"^\"")),Arg("2")]),PP-Entry(Path1("Expr"),[Arg("1")]),PP-Entry(Path("Expr",[selector("1","iter-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ExprStm"),[Arg("1"),FBOX(KW,S("\";\""))]),PP-Entry(Path("ExprStm",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("FunDef"),[Arg("1"),Arg("2"),Arg("3"),Arg("4")]),PP-Entry(Path("FunDef",[selector("3","opt")]),[Arg("1")]),PP-Entry(Path1("DecSeq"),[Arg("1")]),PP-Entry(Path("DecSeq",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("Inline"),[FBOX(KW,S("\"inline\""))]),PP-Entry(Path1("Id"),[Arg("1")]),PP-Entry(Path1("Or"),[Arg("1"),FBOX(KW,S("\"|\"")),Arg("2")]),PP-Entry(Path1("InitDeclaratorList"),[Arg("1")]),PP-Entry(Path("InitDeclaratorList",[selector("1","iter-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("InitDeclarator"),[Arg("1"),FBOX(KW,S("\"=\"")),Arg("2")]),PP-Entry(Path1("Initializer"),[FBOX(KW,S("\"{\"")),Arg("1"),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("InitializerTrComma"),[FBOX(KW,S("\"{\"")),Arg("1"),FBOX(KW,S("\",\"")),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("InitializerSeq"),[Arg("1"),Arg("2")]),PP-Entry(Path("InitializerSeq",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("InitializerList"),[Arg("1")]),PP-Entry(Path("InitializerList",[selector("1","iter-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("While"),[FBOX(KW,S("\"while\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\"")),Arg("2")]),PP-Entry(Path1("Do"),[FBOX(KW,S("\"do\"")),Arg("1"),FBOX(KW,S("\"while\"")),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\"")),FBOX(KW,S("\";\""))]),PP-Entry(Path1("For"),[FBOX(KW,S("\"for\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\";\"")),Arg("2"),FBOX(KW,S("\";\"")),Arg("3"),FBOX(KW,S("\")\"")),Arg("4")]),PP-Entry(Path("For",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path("For",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path("For",[selector("3","opt")]),[Arg("1")]),PP-Entry(Path1("ForDec"),[FBOX(KW,S("\"for\"")),FBOX(KW,S("\"(\"")),Arg("1"),Arg("2"),FBOX(KW,S("\";\"")),Arg("3"),FBOX(KW,S("\")\"")),Arg("4")]),PP-Entry(Path("ForDec",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path("ForDec",[selector("3","opt")]),[Arg("1")]),PP-Entry(Path1("Break"),[FBOX(KW,S("\"break\"")),FBOX(KW,S("\";\""))]),PP-Entry(Path1("Continue"),[FBOX(KW,S("\"continue\"")),FBOX(KW,S("\";\""))]),PP-Entry(Path1("Return"),[FBOX(KW,S("\"return\"")),Arg("1"),FBOX(KW,S("\";\""))]),PP-Entry(Path("Return",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("Goto"),[FBOX(KW,S("\"goto\"")),Arg("1"),FBOX(KW,S("\";\""))]),PP-Entry(Path1("Label"),[Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path1("Case"),[FBOX(KW,S("\"case\"")),Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path1("Default"),[FBOX(KW,S("\"default\"")),FBOX(KW,S("\":\"")),Arg("1")]),PP-Entry(Path1("IntLit"),[Arg("1")]),PP-Entry(Path1("CharLit"),[Arg("1")]),PP-Entry(Path1("FloatLit"),[Arg("1")]),PP-Entry(Path1("LogicalAnd"),[Arg("1"),FBOX(KW,S("\"&&\"")),Arg("2")]),PP-Entry(Path1("LogicalOr"),[Arg("1"),FBOX(KW,S("\"||\"")),Arg("2")]),PP-Entry(Path1("Mul"),[Arg("1"),FBOX(KW,S("\"*\"")),Arg("2")]),PP-Entry(Path1("Div"),[Arg("1"),FBOX(KW,S("\"/\"")),Arg("2")]),PP-Entry(Path1("Mod"),[Arg("1"),FBOX(KW,S("\"%\"")),Arg("2")]),PP-Entry(Path1("VarArgs"),[Arg("1"),FBOX(KW,S("\",\"")),FBOX(KW,S("\"...\""))]),PP-Entry(Path1("ParamList"),[Arg("1")]),PP-Entry(Path("ParamList",[selector("1","iter-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ParamDec"),[Arg("1"),Arg("2")]),PP-Entry(Path1("ParamDecAbstr"),[Arg("1"),Arg("2")]),PP-Entry(Path("ParamDecAbstr",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path1("PrimaryExpr"),[Arg("1")]),PP-Entry(Path1("ArraySubscript"),[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path1("Call"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("Call",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path1("MemberAccess"),[Arg("1"),FBOX(KW,S("\".\"")),Arg("2")]),PP-Entry(Path1("PMemberAccess"),[Arg("1"),FBOX(KW,S("\"->\"")),Arg("2")]),PP-Entry(Path1("PostIncr"),[Arg("1"),FBOX(KW,S("\"++\""))]),PP-Entry(Path1("PostDecr"),[Arg("1"),FBOX(KW,S("\"--\""))]),PP-Entry(Path1("PostfixExpr"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("PostfixExprTrComma"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\",\"")),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("Lit"),[Arg("1")]),PP-Entry(Path1("StringLitSeq"),[Arg("1")]),PP-Entry(Path("StringLitSeq",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("ParenExpr"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("Lt"),[Arg("1"),FBOX(KW,S("\"<\"")),Arg("2")]),PP-Entry(Path1("Gt"),[Arg("1"),FBOX(KW,S("\">\"")),Arg("2")]),PP-Entry(Path1("LtEq"),[Arg("1"),FBOX(KW,S("\"<=\"")),Arg("2")]),PP-Entry(Path1("GtEq"),[Arg("1"),FBOX(KW,S("\">=\"")),Arg("2")]),PP-Entry(Path1("If"),[FBOX(KW,S("\"if\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\"")),Arg("2")]),PP-Entry(Path1("If"),[FBOX(KW,S("\"if\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\"")),Arg("2"),FBOX(KW,S("\"else\"")),Arg("3")]),PP-Entry(Path1("Switch"),[FBOX(KW,S("\"switch\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\"")),Arg("2")]),PP-Entry(Path1("LeftShift"),[Arg("1"),FBOX(KW,S("\"<<\"")),Arg("2")]),PP-Entry(Path1("RightShift"),[Arg("1"),FBOX(KW,S("\">>\"")),Arg("2")]),PP-Entry(Path1("TypeSpecifier"),[Arg("1")]),PP-Entry(Path1("TypeQualifier"),[Arg("1")]),PP-Entry(Path1("SpecifierQualifierList"),[Arg("1")]),PP-Entry(Path("SpecifierQualifierList",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("StorageClassSpecifier"),[Arg("1")]),PP-Entry(Path1("TypeSpecifier"),[Arg("1")]),PP-Entry(Path1("TypeQualifier"),[Arg("1")]),PP-Entry(Path1("FunSpecifier"),[Arg("1")]),PP-Entry(Path1("DecSpecifierSeq"),[Arg("1")]),PP-Entry(Path("DecSpecifierSeq",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("LabeledStm"),[Arg("1")]),PP-Entry(Path1("SelectionStm"),[Arg("1")]),PP-Entry(Path1("IterationStm"),[Arg("1")]),PP-Entry(Path1("JumpStm"),[Arg("1")]),PP-Entry(Path1("Typedef"),[FBOX(KW,S("\"typedef\""))]),PP-Entry(Path1("Auto"),[FBOX(KW,S("\"auto\""))]),PP-Entry(Path1("Register"),[FBOX(KW,S("\"register\""))]),PP-Entry(Path1("Static"),[FBOX(KW,S("\"static\""))]),PP-Entry(Path1("Extern"),[FBOX(KW,S("\"extern\""))]),PP-Entry(Path1("StructOrUnionDec"),[Arg("1"),Arg("2"),FBOX(KW,S("\"{\"")),Arg("3"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("StructOrUnionDec",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path1("StructOrUnionSpecifier"),[Arg("1"),Arg("2")]),PP-Entry(Path1("Struct"),[FBOX(KW,S("\"struct\""))]),PP-Entry(Path1("Union"),[FBOX(KW,S("\"union\""))]),PP-Entry(Path1("StructDecList"),[Arg("1")]),PP-Entry(Path("StructDecList",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("StructDec"),[Arg("1"),Arg("2"),FBOX(KW,S("\";\""))]),PP-Entry(Path1("StructDeclList"),[Arg("1")]),PP-Entry(Path("StructDeclList",[selector("1","iter-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("StructDeclarator"),[Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path("StructDeclarator",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("TranslationUnit"),[Arg("1")]),PP-Entry(Path("TranslationUnit",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("ExtDecSeq"),[Arg("1")]),PP-Entry(Path("ExtDecSeq",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("ExtDec"),[Arg("1")]),PP-Entry(Path1("TypeName"),[Arg("1"),Arg("2")]),PP-Entry(Path("TypeName",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path1("AbstrDeclPointer"),[Arg("1"),Arg("2")]),PP-Entry(Path("AbstrDeclPointer",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("AbstrDeclPar"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("AbstrDeclAssign"),[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("AbstrDeclAssign",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path("AbstrDeclAssign",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path1("AbstrDeclDeref"),[Arg("1"),FBOX(KW,S("\"[\"")),FBOX(KW,S("\"*\"")),FBOX(KW,S("\"]\""))]),PP-Entry(Path("AbstrDeclDeref",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path1("AbstrDeclParamTypes"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("AbstrDeclParamTypes",[selector("1","opt")]),[Arg("1")]),PP-Entry(Path("AbstrDeclParamTypes",[selector("2","opt")]),[Arg("1")]),PP-Entry(Path1("Const"),[FBOX(KW,S("\"const\""))]),PP-Entry(Path1("Restrict"),[FBOX(KW,S("\"restrict\""))]),PP-Entry(Path1("Volatile"),[FBOX(KW,S("\"volatile\""))]),PP-Entry(Path1("TypeQualifierList"),[Arg("1")]),PP-Entry(Path("TypeQualifierList",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("Void"),[FBOX(KW,S("\"void\""))]),PP-Entry(Path1("Char"),[FBOX(KW,S("\"char\""))]),PP-Entry(Path1("Short"),[FBOX(KW,S("\"short\""))]),PP-Entry(Path1("Int"),[FBOX(KW,S("\"int\""))]),PP-Entry(Path1("Long"),[FBOX(KW,S("\"long\""))]),PP-Entry(Path1("Float"),[FBOX(KW,S("\"float\""))]),PP-Entry(Path1("Double"),[FBOX(KW,S("\"double\""))]),PP-Entry(Path1("Signed"),[FBOX(KW,S("\"signed\""))]),PP-Entry(Path1("Unsigned"),[FBOX(KW,S("\"unsigned\""))]),PP-Entry(Path1("Bool"),[FBOX(KW,S("\"_Bool\""))]),PP-Entry(Path1("Complex"),[FBOX(KW,S("\"_Complex\""))]),PP-Entry(Path1("Imaginary"),[FBOX(KW,S("\"_Imaginary\""))]),PP-Entry(Path1("StructOrUnion"),[Arg("1")]),PP-Entry(Path1("Enum"),[Arg("1")]),PP-Entry(Path1("TypedefName"),[Arg("1")]),PP-Entry(Path1("PreIncr"),[FBOX(KW,S("\"++\"")),Arg("1")]),PP-Entry(Path1("PreDecr"),[FBOX(KW,S("\"--\"")),Arg("1")]),PP-Entry(Path1("CastExpr"),[Arg("1"),Arg("2")]),PP-Entry(Path1("SizeOf"),[FBOX(KW,S("\"sizeof\"")),Arg("1")]),PP-Entry(Path1("SizeOfType"),[FBOX(KW,S("\"sizeof\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("Deref"),[FBOX(KW,S("\"*\""))]),PP-Entry(Path1("Ref"),[FBOX(KW,S("\"&\""))]),PP-Entry(Path1("Plus"),[FBOX(KW,S("\"+\""))]),PP-Entry(Path1("Minus"),[FBOX(KW,S("\"-\""))]),PP-Entry(Path1("Not"),[FBOX(KW,S("\"!\""))]),PP-Entry(Path1("Complement"),[FBOX(KW,S("\"~\""))]),PP-Entry(Path1("StdInclude"),[FBOX(KW,S("\"#\"")),FBOX(KW,S("\"include\"")),FBOX(KW,S("\"<\"")),Arg("1"),FBOX(KW,S("\">\""))]),PP-Entry(Path1("Include"),[FBOX(KW,S("\"#\"")),FBOX(KW,S("\"include\"")),FBOX(KW,S("\"\\\"\"")),Arg("1"),FBOX(KW,S("\"\\\"\""))])])